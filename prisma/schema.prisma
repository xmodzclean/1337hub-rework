// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid()) @map("_id")
  full_name          String?
  user_name          String              @unique
  nickname           String?             
  bio                String?             // User's bio/description
  image_url          String? // due to 42's copyright, this will be used only for the integration week event.
  banner_url         String?
  curr_level         Float
  last_level         Float
  is_verified        Boolean             @default(false)
  likes_given        Reaction[]          @relation("likes_given")
  likes_received     Reaction[]          @relation("likes_received")
  feedbacks_given    Feedback[]          @relation("feedbacks_given")
  feedbacks_received Feedback[]          @relation("feedbacks_received")
  points_given       PointsTransaction[] @relation("points_given") // Transactions where user gave points
  points_received    PointsTransaction[] @relation("points_received") // Transactions where user received points
  notifications      Notification[]      @relation("user_notifications")
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  is_registered_IW   Boolean             @default(false)
  is_admin_IW        Boolean             @default(false)
  is_banned_IW       Boolean             @default(false)
  total_points_IW    Int                 @default(0)
}

// model Game {

// }

model PointsTransaction {
  id         String   @id @default(cuid()) @map("_id")
  admin_id   String // References the admin user giving points
  admin      User     @relation("points_given", fields: [admin_id], references: [id])
  user_id    String // References the user receiving points
  user       User     @relation("points_received", fields: [user_id], references: [id])
  points     Int // Amount of points given
  created_at DateTime @default(now()) // Timestamp of the transaction

  @@index([admin_id, user_id]) // Optional: index for faster lookup
}

model Reaction {
  id          String   @id @default(cuid()) @map("_id")
  reactor_id  String
  reactor     User     @relation("likes_given", fields: [reactor_id], references: [id])
  receiver_id String
  receiver    User     @relation("likes_received", fields: [receiver_id], references: [id])
  isLike      Boolean
  created_at  DateTime @default(now())

  @@unique([reactor_id, receiver_id])
}

model Feedback {
  id            String   @id @default(cuid()) @map("_id")
  feedback_text String
  giver_id      String
  giver         User     @relation("feedbacks_given", fields: [giver_id], references: [id])
  receiver_id   String
  receiver      User     @relation("feedbacks_received", fields: [receiver_id], references: [id])
  created_at    DateTime @default(now())

  @@unique([giver_id, receiver_id, created_at])
}

model Notification {
  id         String      @id @default(cuid()) @map("_id")
  user_id    String
  user       User        @relation("user_notifications", fields: [user_id], references: [id])
  type       String      // e.g., "feedback", "like", "points", etc.
  title      String
  message    String
  data       String?     // JSON string for additional data
  is_read    Boolean     @default(false)
  created_at DateTime    @default(now())

  @@index([user_id, is_read])
}

model BannedUser {
  id          String   @id @default(cuid()) @map("_id")
  login       String   @unique // 42 login of the banned user
  reason      String   // Reason for the ban
  banned_by   String   // Admin who banned the user
  banned_at   DateTime @default(now())
  is_active   Boolean  @default(true) // Can be used to temporarily unban
}

model Announcement {
  id             String   @id @default(cuid()) @map("_id")
  title          String
  message        String
  created_by     String   // Admin who created the announcement
  created_at     DateTime @default(now())
  is_global      Boolean  @default(false) // Global or targeted to specific user
  target_login   String?  // If not global, specific user login
  is_active      Boolean  @default(true)
  is_anonymous   Boolean  @default(false) // If true, hides who created it
  dismissed_by   String[] @default([]) // Array of user logins who dismissed it
  viewed_by      String[] @default([]) // Array of user logins who viewed it
  view_count     Int      @default(0) // Total view count for analytics
}
