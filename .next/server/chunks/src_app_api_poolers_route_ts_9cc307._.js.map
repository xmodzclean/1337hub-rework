{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/api/poolers/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport path from \"path\";\nimport fs from \"fs\";\n\ninterface PoolerData {\n  fullname: string;\n  email: string;\n  login: string;\n  kind: string;\n  image: string;\n  staff: boolean;\n  correction_point: number;\n  pool_month: string;\n  pool_year: string;\n  location: string | null;\n  wallet: number;\n  campus_id: string;\n  campus_name: string;\n  level: number;\n  accepted: string;\n  reason: string | null;\n  isvalidated: string;\n  cheating: boolean;\n}\n\ninterface CampusPoolData {\n  [key: string]: {\n    [poolKey: string]: PoolerData[];\n  };\n}\n\nexport async function GET(req: Request) {\n  const { searchParams } = new URL(req.url);\n  const campus = searchParams.get(\"campus\");\n  const pool = searchParams.get(\"pool\");\n  const search = searchParams.get(\"search\")?.toLowerCase();\n\n  try {\n    // Define the campus file mappings\n    const campusFiles: { [key: string]: string[] } = {\n      'benguerir': ['bg7.json', 'bg8.json'],\n      'rabat': ['rb7.json', 'rb8.json'],\n      'tetouan': ['t7.json', 't8.json'],\n      'khouribga': ['kh7.json', 'kh8.json']\n    };\n\n    const dataPath = process.cwd(); // Files are in root directory\n    const allData: CampusPoolData = {};\n\n    // Load all data or specific campus data\n    const campusesToLoad = campus === 'all' ? Object.keys(campusFiles) : [campus || 'benguerir'];\n\n    for (const campusName of campusesToLoad) {\n      if (!campusFiles[campusName]) continue;\n      \n      allData[campusName] = {};\n      \n      for (const file of campusFiles[campusName]) {\n        const poolNumber = file.includes('7') ? '7' : '8';\n        const filePath = path.join(dataPath, file);\n        \n        try {\n          if (fs.existsSync(filePath)) {\n            const fileContent = fs.readFileSync(filePath, 'utf-8');\n            const poolData: PoolerData[] = JSON.parse(fileContent);\n            allData[campusName][poolNumber] = poolData.sort((a, b) => b.level - a.level);\n          } else {\n            allData[campusName][poolNumber] = [];\n          }\n        } catch (error) {\n          console.error(`Error loading ${file}:`, error);\n          allData[campusName][poolNumber] = [];\n        }\n      }\n    }\n\n    // Filter data based on parameters\n    let filteredData: (PoolerData & { campus?: string })[] = [];\n\n    if (campus === 'all') {\n      // Combine all campuses\n      for (const [campusName, campusData] of Object.entries(allData)) {\n        if (pool === 'all') {\n          const pool7 = campusData['7'] || [];\n          const pool8 = campusData['8'] || [];\n          filteredData.push(...pool7.map(s => ({ ...s, campus: campusName })));\n          filteredData.push(...pool8.map(s => ({ ...s, campus: campusName })));\n        } else if (pool && campusData[pool]) {\n          filteredData.push(...campusData[pool].map(s => ({ ...s, campus: campusName })));\n        }\n      }\n    } else {\n      // Single campus\n      const campusName = campus || 'benguerir';\n      const campusData = allData[campusName] || {};\n      \n      if (pool === 'all') {\n        const pool7 = campusData['7'] || [];\n        const pool8 = campusData['8'] || [];\n        filteredData.push(...pool7, ...pool8);\n      } else if (pool && campusData[pool]) {\n        filteredData.push(...campusData[pool]);\n      } else {\n        // Default to all pools if no specific pool requested\n        const pool7 = campusData['7'] || [];\n        const pool8 = campusData['8'] || [];\n        filteredData.push(...pool7, ...pool8);\n      }\n    }\n\n    // Apply search filter\n    if (search) {\n      filteredData = filteredData.filter(student => \n        student.fullname.toLowerCase().includes(search) ||\n        student.login.toLowerCase().includes(search)\n      );\n    }\n\n    // Sort by level descending\n    filteredData.sort((a, b) => b.level - a.level);\n\n    // Calculate statistics\n    const stats = {\n      total: filteredData.length,\n      admitted: 0,\n      nonAdmitted: 0,\n      cheating: 0,\n      validated: 0,\n      avgLevel: 0,\n      topLevel: 0\n    };\n\n    if (filteredData.length > 0) {\n      filteredData.forEach(student => {\n        // Count validated students\n        if (student.isvalidated === 'yes') {\n          stats.validated++;\n        }\n        \n        // Count cheating students\n        if (student.cheating === true) {\n          stats.cheating++;\n          stats.nonAdmitted++;\n        } else if (student.accepted === 'yes' && student.isvalidated !== 'yes' && student.level <= 7) {\n          // Accepted but didn't validate final exam and level <= 7\n          stats.nonAdmitted++;\n        } else if (student.accepted === 'yes' && \n                   (student.reason === null || student.reason === undefined) && \n                   student.cheating === false && \n                   student.level > 7 && \n                   student.isvalidated === 'no') {\n          // Special case: accepted=yes, reason=null, cheating=false, level>7, isvalidated=no -> Admitted\n          stats.admitted++;\n        } else if (student.accepted === 'yes') {\n          stats.admitted++;\n        } else {\n          stats.nonAdmitted++;\n        }\n      });\n\n      stats.avgLevel = parseFloat((filteredData.reduce((sum, student) => sum + student.level, 0) / filteredData.length).toFixed(2));\n      stats.topLevel = parseFloat(Math.max(...filteredData.map(s => s.level)).toFixed(2));\n    }\n\n    return NextResponse.json({\n      data: filteredData,\n      stats: stats\n    }, { status: 200 });\n\n  } catch (error) {\n    console.error('Error in poolers API:', error);\n    return NextResponse.json(\n      { message: \"Error fetching poolers data!\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}