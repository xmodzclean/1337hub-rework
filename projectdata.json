[{
            project_id: 1314,
            id: "1",
            name: "Libft",
            description: "This project is your very first project as a student at 42. You will need to recode a few functions of the C standard library as well as some other utility functions that you will use during your whole cursus.",
            difficulty: "beginner",
            estimatedHours: 70,
            baseXP: 462,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/147564/en.subject.pdf",
            status: "completed",
            tags: ["Unix logic", "Rigor", "Algorithms & AI", "Imperative programming"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n  \n  - Remain polite, courteous, respectful and constructive throughout the\n  evaluation process. The well-being of the community depends on it.\n  \n  - Identify with the student or group whose work is evaluated the possible\n  dysfunctions in their project. Take the time to discuss and debate the\n  problems that may have been identified.\n  \n  - You must consider that there might be some differences in how your peers\n  might have understood the project's instructions and the scope of its\n  functionalities. Always keep an open mind and grade them as honestly as\n  possible. The pedagogy is useful only and only if the peer-evaluation is\n  done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "Do not blindly trust any scripts. The tester could be wrong!", "Check the makefile: no wildcard, no relink, or the final grade is 0.", "Use make, then make --debug to be sure.", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/147564/en.subject.pdf"
                }],
                mandatory: {
                    title: "Mandatory part",
                    description: "You must test each of the functions of the libft with your own tests.",
                    criteria: [{
                        id: "1",
                        name: "Libc Functions #1",
                        description: "Test every function and make sure they work properly:\n  \n                              - ft_strlen\n                              - ft_memcpy\n                              - ft_memset\n                              - ft_bzero\n                              - ft_memmove\n                              - ft_memcmp\n                              - ft_memchr Is everything working?",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "2",
                        name: "Libc Functions #2",
                        description: "Test every function and make sure they work properly:\n  \n                              - ft_isalpha\n                              - ft_isdigit\n                              - ft_isalnum\n                              - ft_isascii\n                              - ft_isprint Is everything working?\n              ",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "3",
                        name: "LibC functions #3",
                        description: "Test every function and make sure they work properly:\n  \n                              - ft_toupper\n                              - ft_tolower\n                              - ft_strchr\n                              - ft_strrchr Is everything working?\n              ",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "4",
                        name: "LibC functions #4",
                        description: "Test every function and make sure they work properly:\n  \n                              - ft_strlcat\n                              - ft_strlcpy\n                              - ft_atoi\n                              - ft_strnstr\n                              - ft_strncmp\n                              - ft_calloc\n                              - ft_strdup Is everything working?\n              ",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "5",
                        name: "Additional functions #1",
                        description: "Test every function and make sure they work properly:\n  \n                              - ft_substr\n                              - ft_strjoin\n                              - ft_putchar_fd\n                              - ft_putstr_fd\n                              - ft_putendl_fd\n                              - ft_putnbr_fd Is everything working?\n              ",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }, {
                        id: "6",
                        name: "Additional functions #2",
                        description: "Test every function and make sure they work properly:\n  \n                              - ft_strmapi\n                              - ft_striteri\n                              - ft_strtrim\n                              - ft_split\n                              - ft_itoa Is everything working?\n              ",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }]
                },
                bonus: {
                    title: "Bonus",
                    description: "Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.",
                    criteria: [{
                        id: "7",
                        name: "ft_lstnew",
                        description: "Is everything working?",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "8",
                        name: "ft_lstdelone",
                        description: "Is everything working?",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "9",
                        name: "ft_lstclear",
                        description: "Is everything working?",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "10",
                        name: "ft_lstadd_front",
                        description: "Is everything working?",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "11",
                        name: "ft_lstadd_back",
                        description: "Is everything working?",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "12",
                        name: "ft_lstsize",
                        description: "Is everything working?",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "13",
                        name: "ft_lstlast",
                        description: "Is everything working?",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "14",
                        name: "ft_lstiter",
                        description: "Is everything working?",
                        type: "boolean",
                        value: 0,
                        points: 2
                    }, {
                        id: "15",
                        name: "ft_lstmap",
                        description: "Is everything working?",
                        type: "boolean",
                        value: 0,
                        points: 2
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1316,
            id: "2",
            name: "ft_printf",
            description: "This project is pretty straightforward, you have to recode printf. You will learn what is and how to implement variadic functions. Once you validate it, you will reuse this function in your future projects.",
            difficulty: "beginner",
            estimatedHours: 70,
            baseXP: 882,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/147351/en.subject.pdf",
            status: "completed",
            tags: ["Unix logic", "Rigor", "Algorithms & AI"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n  \n  - Remain polite, courteous, respectful and constructive throughout the\n  evaluation process. The well-being of the community depends on it.\n  \n  - Identify with the student or group whose work is evaluated the possible\n  dysfunctions in their project. Take the time to discuss and debate the\n  problems that may have been identified.\n  \n  - You must consider that there might be some differences in how your peers\n  might have understood the project's instructions and the scope of its\n  functionalities. Always keep an open mind and grade them as honestly as\n  possible. The pedagogy is useful only and only if the peer-evaluation is\n  done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/147351/en.subject.pdf"
                }],
                mandatory: {
                    title: "Mandatory part",
                    criteria: [{
                        id: "1",
                        name: "Simple Conversion Management",
                        description: "- Simply check each conversion without any flags 'cspdiuxX%'\n                            - Try special cases like 0, or smallest int, or empty string, or NULL pointer.\n                            - Test multiple arguments/conversions.\n                            - Test various conversions in the middle of a sentence (put other characters before and/or after).\n                            ",
                        type: "boolean",
                        value: 0,
                        points: 50
                    }, {
                        id: "2",
                        name: "Get Crazy",
                        description: "- Redo every previous test but this time verify that the return value matches the one of the original printf.\n                            - Try any combination of conversions.\n                            - Check what happens with a series of identical conversions following each other.\n                            ",
                        type: "boolean",
                        value: 0,
                        points: 50
                    }]
                },
                bonus: {
                    title: "Bonus part",
                    description: "Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.",
                    criteria: [{
                        id: "3",
                        name: "Simple flags management",
                        description: " - Check the flags '.', '-' and 0.\n                             - Check the %-d with INT_MIN\n                             - Check the - flag with any value.\n                             - Check the 0 flag like %04d.\n                             - Check the '.' with multiple precisions.\n                             - For every test, verify the return value matches the original one.\n                             - For each working flag, give 1 point.\n                             - If all the flags work, give 2 bonus points.\n              ",
                        type: "progress",
                        value: 0,
                        points: 12.5,
                        maxProgress: 5
                    }, {
                        id: "4",
                        name: "# + space",
                        description: " - Check all the conversions with the flags '#', '+' and space with all the other flag combinations.\n                             - For each working flag, give 1 point.\n                             - If all the flags work, give 2 bonus points.\n              ",
                        type: "progress",
                        value: 0,
                        points: 12.5,
                        maxProgress: 5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1327,
            id: "3",
            name: "get_next_line",
            description: "May it be a file, stdin, or even later a network connection, you will always need a way to read content line by line. It is time to start working on this function, which will be essential for your future projects.",
            difficulty: "beginner",
            estimatedHours: 70,
            baseXP: 882,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/147230/en.subject.pdf",
            status: "completed",
            tags: ["Unix logic", "Rigor", "Unix", "Algorithms & AI"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n  \n  - Remain polite, courteous, respectful and constructive throughout the\n  evaluation process. The well-being of the community depends on it.\n  \n  - Identify with the student or group whose work is evaluated the possible\n  dysfunctions in their project. Take the time to discuss and debate the\n  problems that may have been identified.\n  \n  - You must consider that there might be some differences in how your peers\n  might have understood the project's instructions and the scope of its\n  functionalities. Always keep an open mind and grade them as honestly as\n  possible. The pedagogy is useful only and only if the peer-evaluation is\n  done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/147230/en.subject.pdf"
                }],
                mandatory: {
                    title: "Mandatory part",
                    criteria: [{
                        id: "1",
                        name: "Norminette",
                        description: "Run the Norminette. If there is an error, the evaluation stops here.\n              You can keep going and discuss the implementation of the code, but the\n              assignment will not be graded.",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }, {
                        id: "2",
                        name: "Compilation",
                        description: "It should be possible to compile the project with the usual flags and -D BUFFER_SIZE.\n              It must be possible to compile this project with and without this flag in addition to\n              the flags: -Wall -Wextra -Werror. If there is an error, the evaluation stops here.\n              You can keep going and discuss the implementation of the code, but the\n              assignment will not be graded.",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }, {
                        id: "3",
                        name: "Error management",
                        description: "Carry out AT LEAST the following tests to try to stress the error\n              management.\n              \n              - Pass an arbitrary file descriptor to the get_next_line function on which it is not possible to read, for example 42. The function must return NULL.\n              - Check the error returns for read and malloc. If there is an error, the evaluation stops here. You can keep going and discuss the implementation of the code, but the assignment will not be graded.",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }, {
                        id: "4",
                        name: "Testing",
                        description: "As the evaluator, you are expected to provide a main which will always check:\n\n              - The return value of the get_next_line is NULL in case of error.\n              - Otherwise, the function returns the line read, always with a \n at the end except if the end of file was reached and does not end with a \n character.\n\n              Test all the possible combinations of the following rules:\n              \n              - Large BUFFER_SIZE (>1024)\n              - Small BUFFER_SIZE (< 8, and 1)\n              - BUFFER_SIZE exactly the length of the line to read\n              - 1 byte variant (+/-) between the line and the BUFFER_SIZE\n              \n              - Read on stdin\n              \n              - Read from a file\n              \n              - (Multiple/Single) Long line (2k+ characters)\n              \n              - (Multiple/Single) Short line (< 4 characters, even 1)\n              \n              - (Multiple/Single) Empty line\n              \n              These tests should enable you to verify the strength of the student's\n              get_next_line.\n              If there is an error, the evaluation stops here.",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }]
                },
                bonus: {
                    title: "Bonus part",
                    description: "Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.",
                    criteria: [{
                        id: "5",
                        name: "Multiple fd reading",
                        description: "Perform the same tests as you did before, this time launch multiple\n              instances of get_next_line with a different file descriptor on each. Make\n              sure that each get_next_line is returning the correct line. Combine with\n              a non-existing fd to check for errors.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "6",
                        name: "Single static variable",
                        description: "Check the code and verify if there is indeed only one static variable.\n              Give the points if that's the case.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1994,
            id: "4",
            name: "Born2beroot",
            description: "This project aims to introduce you to the wonderful world of virtualization.",
            difficulty: "beginner",
            estimatedHours: 70,
            baseXP: 882,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/147358/en.subject.pdf",
            status: "completed",
            tags: ["Rigor", "Network & system administration"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n  \n  - Remain polite, courteous, respectful and constructive throughout the\n  evaluation process. The well-being of the community depends on it.\n  \n  - Identify with the student or group whose work is evaluated the possible\n  dysfunctions in their project. Take the time to discuss and debate the\n  problems that may have been identified.\n  \n  - You must consider that there might be some differences in how your peers\n  might have understood the project's instructions and the scope of its\n  functionalities. Always keep an open mind and grade them as honestly as\n  possible. The pedagogy is useful only and only if the peer-evaluation is\n  done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/147358/en.subject.pdf"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Preliminary tests",
                        description: "- Defense can only happen if the student being evaluated or group is present. This way everybody learns by sharing knowledge with each other.\n              - If no work has been submitted (or wrong files, wrong directory, or wrong filenames), the grade is 0, and the evaluation process ends.\n              - For this project, you have to clone their Git repository on their station.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                },
                general: {
                    title: "General instructions",
                    criteria: [{
                        id: "2",
                        name: "General instructions",
                        description: '- During the defense, as soon as you need help to verify a point, the student evaluated must help you.\n              - Ensure that the "signature.txt" file is present at the root of the cloned repository.\n              - Check that the signature contained in "signature.txt" is identical to that of the ".vdi" file of the virtual machine to be evaluated. A simple "diff" should allow you to compare the two signatures. If necessary, ask the student being evaluated where their ".vdi" file is located.\n              - As a precaution, you can duplicate the initial virtual machine in order to keep a copy.\n              - Start the virtual machine to be evaluated.\n              - If something doesn\'t work as expected or the two signatures differ, the evaluation stops here.',
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                },
                mandatory: {
                    title: "Mandatory part",
                    description: "The project consists of creating and configuring a virtual machine following strict rules. The student being evaluated will have to help you during the defense. Make sure that all of the following points are observed.",
                    criteria: [{
                        id: "3",
                        name: "Project overview",
                        description: "The student being evaluated should explain to you simply:\n              - How a virtual machine works.\n              - Their choice of operating system.\n              - The basic differences between Rocky and Debian.\n              - The purpose of virtual machines.\n              - If the evaluated student chose Rocky: what SELinux and DNF are.\n              - If the evaluated student chose Debian: the difference between aptitude and apt, and what APPArmor is. During the defense, a script must display information all every 10 minutes. Its operation will be checked in detail later. If the explanations are not clear, the evaluation stops here.\n              ",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "4",
                        name: "Simple setup",
                        description: "Remember: Whenever you need help checking something, the student being evaluated\n              should be able to help you.\n              \n              - Ensure that the machine does not have a graphical environment at launch. A password will be requested before attempting to connect to this machine. Finally, connect with a user with the help of the student being evaluated. This user must not be root. Pay attention to the password chosen, it must follow the rules imposed in the subject.\n              - Check that the UFW service is started with the help of the evaluator.\n              - Check that the SSH service is started with the help of the evaluator.\n              - Check that the chosen operating system is Debian or Rocky with the help of the evaluator. If something does not work as expected or is not clearly explained, the evaluation stops here.\n              ",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "5",
                        name: "User",
                        description: 'Remember: Whenever you need help checking something, the student being evaluated\n              should be able to help you.\n              \n              The subject requests that a user with the login of the student being evaluated is present\n              on the virtual machine. Check that it has been added and that it belongs to the\n              "sudo" and "user42" groups.\n              \n              Make sure the rules imposed in the subject concerning the password policy have been put in place by\n              following the following steps.\n              \n              First, create a new user. Assign it a password of your choice, respecting the subject rules. The\n              student being evaluated must now explain to you how they were able to set up the rules requested\n              in the subject on their virtual machine.\n              Normally there should be one or two modified files. If there is any problem, the evaluation stops here.\n              \n              - Now that you have a new user, ask the student being evaluated to create a group named "evaluating" in\n              front of you and assign it to this user. Finally, check that this user belongs to the "evaluating" group.\n              \n              - Finally, ask the student being evaluated to explain the advantages of this password policy, as well as the\n              advantages and disadvantages of its implementation. Of course, answering that it is because the subject asks\n              for it does not count.\n              \n              If something does not work as expected or is not clearly explained, the evaluation stops here.',
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "6",
                        name: "Hostname and partitions",
                        description: "Remember: Whenever you need help checking something, the student being evaluated\n              should be able to help you.\n              \n              - Check that the hostname of the machine is correctly formatted as follows: login42 (login of the student being evaluated).\n              - Modify this hostname by replacing the login with yours, then restart the machine. If on restart, the hostname has not been updated, the evaluation stops here.\n              - You can now restore the machine to the original hostname.\n              - Ask the student being evaluated how to view the partitions for this virtual machine.\n              - Compare the output with the example given in the subject. Please note: if the student evaluated makes the bonuses, it will be necessary to refer to the bonus example.\n              \n              This part is an opportunity to discuss the scores! The student being evaluated should\n              give you a brief explanation of how LVM works and what it is all about.\n              If something does not work as expected or is not clearly explained,\n              the evaluation stops here.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "7",
                        name: "SUDO",
                        description: 'Remember: Whenever you need help checking something, the student being evaluated\n              should be able to help you.\n              \n              - Check that the "sudo" program is properly installed on the virtual machine.\n              - The student being evaluated should now show assigning your new user to the "sudo" group.\n              - The subject imposes strict rules for sudo. The student being evaluated must first explain the value and operation of sudo using examples of their choice. In a second step, it must show you the implementation of the rules imposed by the subject.\n              - Verify that the "/var/log/sudo/" folder exists and has at least one file. Check the contents of the files in this folder, You should see a history of the commands used with sudo. Finally, try to run a command via sudo. See if the file (s) in the "/var/log/sudo/" folder have been updated. If something does not work as expected or is not clearly explained, the evaluation stops here.',
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "8",
                        name: "UFW / Firewalld",
                        description: 'Remember: Whenever you need help checking something, the student being evaluated\n              should be able to help you.\n              \n              - Check that the "UFW" (or "Firewalld" for rocky) program is properly installed on the virtual machine.\n              - Check that it is working properly.\n              - The student being evaluated should explain to you basically what UFW (or Firewalld) is and the value of using it.\n              - List the active rules in UFW (or Firewalld). A rule must exist for port 4242.\n              - Add a new rule to open port 8080. Check that this one has been added by listing the active rules.\n              - Finally, delete this new rule with the help of the student being evaluated. If something does not work as expected or is not clearly explained, the evaluation stops here.',
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "9",
                        name: "SSH",
                        description: 'Remember: Whenever you need help checking something, the student being evaluated\n              should be able to help you.\n              \n              - Check that the SSH service is properly installed on the virtual machine.\n              - Check that it is working properly.\n              - The student being evaluated must be able to explain to you basically what SSH is and the value of using it.\n              - Verify that the SSH service only uses port 4242 in the virtual machine.\n              - The student being evaluated should help you use SSH in order to log in with the newly created user. To do this, you can use a key or a simple password. It will depend on the student being evaluated. Of course, you have to make sure that you cannot use SSH with the "root" user as stated in the subject. If something does not work as expected or is not clearly explained, the evaluation stops here.',
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "10",
                        name: "Script monitoring",
                        description: 'Remember: Whenever you need help checking something, the student being evaluated\n              should be able to help you.\n              \n              The student being evaluated should explain to you simply:\n              \n              - How their script works by showing you the code.\n              - What "cron" is.\n              - How the student being evaluated set up their script so that it runs every 10 minutes from when the server starts. Once the correct functioning of the script has been verified, the student being evaluated should ensure that this script runs every minute. You can run whatever you want to make sure the script runs with dynamic values correctly. Finally, the student being evaluated should make the script stop running when the server has started up, but without modifying the script itself. To check this point, you will have to restart the server one last time. At startup, it will be necessary to check that the script still exists in the same place, that its rights have remained unchanged, and that it has not been modified. If something does not work as expected or is not clearly explained, the evaluation stops here.',
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                },
                bonus: {
                    title: "Bonus part",
                    description: "Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.",
                    criteria: [{
                        id: "11",
                        name: "Bonus",
                        description: "Check, with the help of the subject and the student being evaluated, the bonus\n              points authorized for this project:\n              \n              - Setting up partitions is worth 2 points.\n              - Setting up WordPress, only with the services required by the subject, is worth 2 points.\n              - The free choice service is worth 1 point. Verify and test the proper functioning and implementation of each extra service. For the free choice service, the student being evaluated has to give you a simple explanation about how it works and why they think it is useful. Please note that NGINX and Apache2 are prohibited.",
                        type: "progress",
                        value: 0,
                        points: 25,
                        maxProgress: 5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 2005,
            id: "5",
            name: "minitalk",
            description: "The purpose of this project is to code a small data exchange program using UNIX signals. It is an introductory project for the bigger UNIX projects that will appear later on in the cursus.",
            difficulty: "beginner",
            estimatedHours: 50,
            baseXP: 1142,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/136339/en.subject.pdf",
            status: "completed",
            tags: ["Applicative"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n  \n  - Remain polite, courteous, respectful and constructive throughout the\n  evaluation process. The well-being of the community depends on it.\n  \n  - Identify with the student or group whose work is evaluated the possible\n  dysfunctions in their project. Take the time to discuss and debate the\n  problems that may have been identified.\n  \n  - You must consider that there might be some differences in how your peers\n  might have understood the project's instructions and the scope of its\n  functionalities. Always keep an open mind and grade them as honestly as\n  possible. The pedagogy is useful only and only if the peer-evaluation is\n  done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/136339/en.subject.pdf"
                }],
                preliminaries: {
                    title: "Preliminary tests",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Prerequisites",
                        description: "- Defense can only happen if the evaluated student or group is present. This way everybody learns by sharing knowledge.\n              - If no work has been submitted (or wrong files, wrong directory, or wrong filenames), the grade is 0, and the evaluation process ends.\n              - No empty repository (= nothing in Git repository).\n              - No Norm error.\n              - Cheating (= -42).\n              - No compilation error. Also, the Makefile must not re-link.\n\n              If all of these requirements are passed, check Yes and go on.\n              Otherwise, use the appropriate flag at the end of the scale!",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }]
                },
                general: {
                    title: "General instructions",
                    criteria: [{
                        id: "2",
                        name: "General instructions",
                        description: "- The Makefile compiles both executables -> 1 point\n              - The server name is 'server' and it prints his PID at launch -> 2 points\n              - The client name is 'client' and is run as follows: './client PID_SERVER STRING_TO_PASS' -> 2 points\n              ",
                        type: "progress",
                        value: 0,
                        points: 25,
                        maxProgress: 5
                    }]
                },
                mandatory: {
                    title: "Mandatory part",
                    description: "This project is an introduction to signals. Check the code and ensure the signals are used only for the communication between the server and the client.",
                    criteria: [{
                        id: "3",
                        name: "Message transmission",
                        description: "It's possible to pass on a message of any size.\n              \n              Received messages must be displayed by the server, and must be obviously\n              corrects!\n              \n              The server should never get stuck or print wrong characters.",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }, {
                        id: "4",
                        name: "Simple setup",
                        description: "- The server can receive multiple strings without needing to be restarted. -> 1 point\n              - Only one global variable per program is allowed, or no global. Ask for explanations. -> 1 point\n              - The communication is done only using the signals SIGUSR1 and SIGUSR2. -> 3 points\n              \n              Received messages must be displayed by the server, and must be obviously\n              corrects!",
                        type: "progress",
                        value: 0,
                        points: 25,
                        maxProgress: 5
                    }]
                },
                bonus: {
                    title: "Bonus part",
                    description: "Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be ignored.",
                    criteria: [{
                        id: "5",
                        name: "Unicode characters support",
                        description: "Unicode characters are supported both by the client and the server.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "6",
                        name: "Acknowledgement",
                        description: "The server acknowledges every message received by sending back a signal to the client.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 2004,
            id: "6",
            name: "pipex",
            description: "This project aims to deepen your understanding of the two concepts that you already know: Redirections and Pipes. It is an introductory project for the bigger UNIX projects that will appear later on in the cursus.",
            difficulty: "beginner",
            estimatedHours: 50,
            baseXP: 1142,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/147342/en.subject.pdf",
            status: "not_started",
            tags: ["Unix logic", "Unix", "Imperative programming"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n  \n  - Remain polite, courteous, respectful and constructive throughout the\n  evaluation process. The well-being of the community depends on it.\n  \n  - Identify with the student or group whose work is evaluated the possible\n  dysfunctions in their project. Take the time to discuss and debate the\n  problems that may have been identified.\n  \n  - You must consider that there might be some differences in how your peers\n  might have understood the project's instructions and the scope of its\n  functionalities. Always keep an open mind and grade them as honestly as\n  possible. The pedagogy is useful only and only if the peer-evaluation is\n  done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/147342/en.subject.pdf"
                }],
                preliminaries: {
                    title: "Preliminary tests",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Prerequisites",
                        description: "- Defense can only happen if the evaluated student or group is present. This way everybody learns by sharing knowledge.\n              - If no work has been submitted (or wrong files, wrong directory, or wrong filenames), the grade is 0, and the evaluation process ends.\n              - No empty repository (= nothing in Git repository).\n              - No Norm error.\n              - Cheating (= -42).\n              - No compilation error. Also, the Makefile must not re-link.\n              \n              If all of these requirements are passed, check 'Yes' and continue the\n              evaluation process. Otherwise, use the appropriate flag at the end of\n              the scale!",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }]
                },
                general: {
                    title: "General instructions",
                    criteria: [{
                        id: "2",
                        name: "General instructions",
                        description: "- If a crash or unexpected error occurs (segmentation fault, bus error, nonsense display, and so forth), use the flag 'Crash'!\n              - The Makefile compiles the executable with the required options.\n              - The executable is named 'pipex'.\n              - No forbidden function is used.",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }]
                },
                mandatory: {
                    title: "Mandatory part",
                    description: "The command './pipex file1 cmd1 cmd2 file2' must behave like this command: '< file1 cmd1 | cmd2 > file2'",
                    criteria: [{
                        id: "3",
                        name: "Error and arguments management",
                        description: "- The program takes 4 arguments, no more, no less (except for bonus part) and only in the required order.\n              - Error management is correct: (un)existing files, files rights, (un)existing command binary, and so forth.\n              \n              If these points are successfully passed, check 'Yes' and continue the\n              evaluation process. Otherwise, the evaluation is over. Use\n              'Incomplete work' or any other appropriate flag.",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }, {
                        id: "4",
                        name: "The program",
                        description: "The program does what the subject requires and doesn't display more\n              information/steps than the shell command it should replicate.\n              \n              Run your own tests and compare the program results against the original\n              shell output. Take a look at the subject examples if you need to.\n              \n              If no error happens, check 'Yes' and continue. Otherwise, the evaluation\n              process ends now.",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }]
                },
                bonus: {
                    title: "Bonus part",
                    description: "Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.",
                    criteria: [{
                        id: "5",
                        name: "Multiple pipes",
                        description: "The program manages the usage of several pipes one after another.\n              As for the mandatory part, test with shell commands then compare with\n              program output.\n              \n              If it works with 2 pipes only in the same command but fails with 5 pipes,\n              the bonus is not passed.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "6",
                        name: "<< and >> with here_doc parameter",
                        description: "The program replicates the use of << and >>.\n\n              Test multiple times something like:\n              'CMD << STOP_VALUE | CMD1 >> file1'",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1476,
            id: "7",
            name: "fract-ol",
            description: "Discover 2D programming and the psychedelic universe of fractals in this project, using minilibX.",
            difficulty: "beginner",
            estimatedHours: 60,
            baseXP: 1e3,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/143919/en.subject.pdf",
            status: "not_started",
            tags: ["2D programming", "Optimization techniques", "Some Maths", "Imperative programming", "Graphics"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n  \n  - Remain polite, courteous, respectful and constructive throughout the\n  evaluation process. The well-being of the community depends on it.\n  \n  - Identify with the student or group whose work is evaluated the possible\n  dysfunctions in their project. Take the time to discuss and debate the\n  problems that may have been identified.\n  \n  - You must consider that there might be some differences in how your peers\n  might have understood the project's instructions and the scope of its\n  functionalities. Always keep an open mind and grade them as honestly as\n  possible. The pedagogy is useful only and only if the peer-evaluation is\n  done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/143919/en.subject.pdf"
                }, {
                    name: "minilibx_mms_beta.tgz",
                    url: "https://cdn.intra.42.fr/document/document/28481/minilibx_mms_beta.tgz"
                }, {
                    name: "minilibx-linux.tgz",
                    url: "https://cdn.intra.42.fr/document/document/28482/minilibx-linux.tgz"
                }, {
                    name: "minilibx_opengl.tgz",
                    url: "https://cdn.intra.42.fr/document/document/28483/minilibx_opengl.tgz"
                }],
                preliminaries: {
                    title: "Preliminary tests",
                    description: "Search for Julia and Mandelbrot sets on Wikipedia, or watch the e-learning videos, to have an idea of what the rendering must look like.",
                    criteria: [{
                        id: "1",
                        name: "Minimal requirements",
                        description: "Does the assignment meet the minimal requirements?\n\n              - The repository isn't empty.\n              - Norminette shows no errors.\n              - No cheating.\n              - No forbidden function/library.\n              - There is no global variable.\n              - The code compiles with the required options.\n              - The executable is named as expected.\n              - During execution, there is no brutal or unmanaged crash (segfault, bus error, and so forth).\n              - No memory leaks.",
                        type: "boolean",
                        value: 0,
                        points: 50
                    }]
                },
                mandatory: {
                    title: "Mandatory part",
                    description: "Evaluate the following points.",
                    criteria: [{
                        id: "2",
                        name: "Graphic management",
                        description: "Is the graphic management functional?\n\n              - When the program runs, there is at least a graphic window open.\n              - Pressing the key ESC exits the program properly (no leaks).\n              - There is a visual change when using the mouse wheel (even if wrong, this part is about checking the event management only).",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "3",
                        name: "Julia",
                        description: "How does the Julia set behave?\n\n              - Does it looks like it should? Search for the Julia fractal set on the internet if you're not sure.\n              - Is it possible to zoom in and out and the basic pattern repeats?\n              - Search for some different Julia sets. You should be able to recreate them by passing different parameters to the program.\n              - Are there colors to represent the depth of the fractal?",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "4",
                        name: "Mandelbrot",
                        description: "How does the Mandelbrot set behave?\n\n              - Does it looks like it should?\n              - Is it possible to zoom in and out and the basic pattern repeats?\n              - Compare the result with some reference pictures: they all look alike, you can't miss them.\n              - Are there colors to represent the depth of the fractal?",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "5",
                        name: "Parameters management",
                        description: "Is the parameter's management implemented according to the subject?\n              Are wrong parameters correctly handled?\n              (Some optional parameters could be handled, for example for the bonus part.)",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "6",
                        name: "MiniLibX images",
                        description: "Take a look at the code and check whether the student uses the images from\n              the MLX to draw the image instead of putting pixels one by one. ;)",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                },
                bonus: {
                    title: "Bonus part",
                    description: "A lot of nice extras.",
                    criteria: [{
                        id: "7",
                        name: "Zoom follows the mouse",
                        description: "The zoom works where the mouse is and not only at the center of the image.",
                        type: "boolean",
                        value: 0,
                        points: 6.25
                    }, {
                        id: "8",
                        name: "Arrows",
                        description: "It must be possible to move the view using the arrow keys. It should also\n              work with the zoom: if an arrow is pressed, the view should move if the\n              user didn't zoom in or out, but also if they did.",
                        type: "boolean",
                        value: 0,
                        points: 6.25
                    }, {
                        id: "9",
                        name: "Colors",
                        description: "The color palette is awesome.\n\n              - Either you say Ouhaaa because it's very beautiful.\n              - Either you say Ouhaaa because it's insanely psychedelic.\n              - Either you say Ouhaaa because the colors change.",
                        type: "boolean",
                        value: 0,
                        points: 6.25
                    }, {
                        id: "10",
                        name: "A third fractal",
                        description: "There is at least one more fractal!! Working, nice, and that is actually a\n              fractal different than the two mandatory ones.",
                        type: "boolean",
                        value: 0,
                        points: 6.25
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 2009,
            id: "8",
            name: "so_long",
            description: "This project is a small 2D game with minilibx. You'll learn about textures, sprites and tiles.",
            difficulty: "beginner",
            estimatedHours: 60,
            baseXP: 1e3,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/136352/en.subject.pdf",
            status: "completed",
            tags: ["Applicative", "Imperative programming", "Graphics"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n  \n  - Remain polite, courteous, respectful and constructive throughout the\n  evaluation process. The well-being of the community depends on it.\n  \n  - Identify with the student or group whose work is evaluated the possible\n  dysfunctions in their project. Take the time to discuss and debate the\n  problems that may have been identified.\n  \n  - You must consider that there might be some differences in how your peers\n  might have understood the project's instructions and the scope of its\n  functionalities. Always keep an open mind and grade them as honestly as\n  possible. The pedagogy is useful only and only if the peer-evaluation is\n  done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/136352/en.subject.pdf"
                }, {
                    name: "minilibx-linux.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26611/minilibx-linux.tgz"
                }, {
                    name: "minilibx_opengl.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26612/minilibx_opengl.tgz"
                }, {
                    name: "minilibx_mms_20200219_beta.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26613/minilibx_mms_20200219_beta.tgz"
                }],
                mandatory: {
                    title: "Mandatory part",
                    criteria: [{
                        id: "1",
                        name: "Executable name",
                        description: 'Execute the make command. The project should compile as expected (the\n                Makefile should not re-link). Verify that the executable name is so_long.\n                Otherwise, use the "invalid compilation" flag at the end of the scale.',
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "2",
                        name: "Parsing",
                        description: "- Use different maps.\n              - Test different sizes.\n              - Test different line sizes.\n              \n              Also, check that the program returns an error and exits properly when the\n              configuration file is misconfigured (e.g., an unknown character,\n              duplicates, an invalid file path, and so forth).\n              \n              Otherwise, the defense is over. Use the appropriate flag: incomplete work,\n              crash...",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "3",
                        name: "Technical elements of the display",
                        description: "Time to evaluate the technical elements of the display.\n              Check that the level is an accurate representation of the map used as parameter.\n              \n              - A window must open at the launch of the program.\n              It must remain open during the whole execution.\n              \n              - Hide all or parts of the window either by using another window\n              or by using the screen's borders. Then, minimize the window\n              and maximize it back. In all cases, the content of the window\n              must remain consistent.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "4",
                        name: "Basic user events",
                        description: "In this section, let's evaluate the program's user events. Execute the 3\n              following tests. If at least one of them fails, this means that no points\n              must be awarded for this section and you have to move to the next one.\n              \n              - Click the cross at the top of the window. The window must close and\n              the program must exit cleanly.\n              \n              - Press the ESC key. The window must close and the program must exit\n              cleanly. In the case of this test, you can accept that another key\n              exits the program, for example, Q.\n              \n              - Press the four arrow keys (it is acceptable to use the WASD or ZQSD keys instead)\n              in the order of your choice. Each key press must render a visible result on the\n              window (player's movement).",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "5",
                        name: "Movements",
                        description: "In this section, let's evaluate the implementation of the player's movement.\n              Execute the 5 following tests. If at least one of them fails, this means\n              that no points must be awarded for this section and you have to move to the\n              next one.\n              \n              - The player's spawning position must be in accordance\n              with the map file.\n              \n              - Press the arrows keys (it is acceptable to use the WASD or ZQSD keys instead)\n              to move in every direction on the map.\n              \n              - Is the game \"playable\"?",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "6",
                        name: "Walls & Sprites",
                        description: "In this section, let's evaluate the map representation. Execute the\n              following tests. If at least one of them fails, this means that no points\n              must be awarded for this section and you have to move to the next one.\n              \n              - The wall's texture is correctly placed and the player cannot go through it.\n              \n              - The collectible's texture is correctly placed and the player can pick\n              it by walking on it.\n              \n              - The Exit texture is correctly placed and the player can finish the game\n              by walking on it but only after picking every collectible.\n              \n              - The player texture is correctly placed and can move in every direction\n              except into the walls.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "7",
                        name: "Counter",
                        description: "In this section, let's evaluate the gameplay elements. Execute the\n              following tests. If at least one of them fails, this means that no points\n              must be awarded for this section and you have to move to the next one.\n              \n              - There's a small counter displayed on the shell that counts how many movements the player does.\n              - The counter can be displayed directly on the game screen (see Bonus part).",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "8",
                        name: "MiniLibX images",
                        description: "Take a look at the code and check whether the student uses the images from\n              the MLX to draw the image instead of putting pixels one by one. ;)",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                },
                bonus: {
                    title: "Bonus part",
                    description: "Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.",
                    criteria: [{
                        id: "9",
                        name: "Enemies",
                        description: "The enemy patrols cause the player to lose if they touch them.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "10",
                        name: "Sprite animation",
                        description: "There's some sprite animation. The evaluated student has to explain\n              what it is and how they did it.",
                        type: "progress",
                        value: 0,
                        points: 7.5,
                        maxProgress: 5
                    }, {
                        id: "11",
                        name: "Counter on screen",
                        description: "The counter of movements is rendered on the screen using texture or\n              mlx_string_put().",
                        type: "progress",
                        value: 0,
                        points: 7.5,
                        maxProgress: 5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 2008,
            id: "9",
            name: "FdF",
            description: "All programs that you wrote until now were executed in text mode on your terminal. Now, let’s discover something more exciting: how to open a graphics window and draw inside? To start your journey in graphic programming, FdF offers to represent “iron wire” meshing in 3D.",
            difficulty: "beginner",
            estimatedHours: 60,
            baseXP: 1e3,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/136326/en.subject.pdf",
            status: "not_started",
            tags: ["Simple graphic library", "Segment layout", "Events", "3D projection to 2D", "Rigor", "Algorithms & AI", "Imperative programming", "Graphics"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n  \n  - Remain polite, courteous, respectful and constructive throughout the\n  evaluation process. The well-being of the community depends on it.\n  \n  - Identify with the student or group whose work is evaluated the possible\n  dysfunctions in their project. Take the time to discuss and debate the\n  problems that may have been identified.\n  \n  - You must consider that there might be some differences in how your peers\n  might have understood the project's instructions and the scope of its\n  functionalities. Always keep an open mind and grade them as honestly as\n  possible. The pedagogy is useful only and only if the peer-evaluation is\n  done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/136326/en.subject.pdf"
                }, {
                    name: "maps.zip",
                    url: "https://cdn.intra.42.fr/document/document/26601/maps.zip"
                }, {
                    name: "fdf_linux",
                    url: "https://cdn.intra.42.fr/document/document/26602/fdf_linux"
                }, {
                    name: "minilibx_mms_20191025_beta.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26603/minilibx_mms_20191025_beta.tgz"
                }, {
                    name: "minilibx-linux.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26604/minilibx-linux.tgz"
                }, {
                    name: "minilibx_macos_sierra_20161017.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26605/minilibx_macos_sierra_20161017.tgz"
                }, {
                    name: "sources.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26606/sources.tgz"
                }, {
                    name: "fdf",
                    url: "https://cdn.intra.42.fr/document/document/26607/fdf"
                }],
                preliminaries: {
                    title: "Preliminary tests",
                    criteria: [{
                        id: "1",
                        name: "Minimal requirements",
                        description: "Does the assignment meet the minimal requirements?\n\n              - The repository isn't empty.\n              - Norminette shows no errors.\n              - No cheating.\n              - No forbidden function/library.\n              - The code compiles with the required options.\n              - The executable is named as expected.\n              - During execution, there is no brutal or unmanaged crash (segfault, bus error, and so forth).\n              - No memory leaks.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }]
                },
                mandatory: {
                    title: "Mandatory part",
                    criteria: [{
                        id: "2",
                        name: "Error management",
                        description: "Test fdf without parameters, with too many parameters, a non-existing\n              file or on which you have no rights. If those tests are passed, then it's\n              all good. This is the only error management that is required. For now on,\n              the maps inside the input files have to be formatted properly.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "3",
                        name: "Graphic management",
                        description: "Run the program with the 42 map provided from the project page and verify that:\n\n              - A window opens\n              - Something is drawn in the window\n              - You can see a isometric projection of the 42 map\n              - Pressing 'ESC' closes the window and exits the program in a clean way (no leaks).\n              - Clicking on the cross on the window's frame closes the window and exits the program in a clean way (no leaks).",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "4",
                        name: "Line tracing",
                        description: "- Use a flat map with nothing but 0, sized 4x4. We have a flat wireframe grid with a projection that is used to give a 3D concept.\n              - Same map, with 1 point at a different altitude. Check that the result corresponds and that the 3D effect is rendered.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "5",
                        name: "Heavy map",
                        description: "Check whether the program handles a bigger map and an aleatory 16x16 map.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "6",
                        name: "Heavier map",
                        description: "Test with bigger, heavier maps. Either those provided in the intranet, the\n              evaluated student, or your owns. Be logical and keep in mind the\n              requirements of the subject regarding what could contain your maps (colors\n              for example).",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "6",
                        name: "Graphic responsive",
                        description: "If the graphical representation stayed fluid and pleasant in the last test\n              with heavy maps, then it's cool.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "7",
                        name: "MiniLibX images",
                        description: "Take a look at the code and check whether the student uses the images from\n              the MLX to draw the image instead of putting pixels one by one. ;)",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }]
                },
                bonus: {
                    title: "Bonus part",
                    description: "A lot of nice extras.",
                    criteria: [{
                        id: "8",
                        name: "Extra projection",
                        description: "Can the map be represented using another projection (such as parallel or conic)?",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "9",
                        name: "Zoooooooom",
                        description: "Is there a way to zoom in and out using the keyboard or mouse?",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "10",
                        name: "Translate",
                        description: "Is there a way to translate the projection using the keyboard or mouse?",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "11",
                        name: "Rotation",
                        description: "Is there a way to rotate the projection using the keyboard or mouse?",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "12",
                        name: "Be crazy",
                        description: "Give one more point if there is any additional bonus you consider is fine.\n              Creativity is an important point in your education and in the digital world.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1471,
            id: "10",
            name: "push_swap",
            description: "This project involves sorting data on a stack, with a limited set of instructions, and the smallest number of moves. To make this happen, you will have to manipulate various sorting algorithms and choose the most appropriate solution(s) for optimized data sorting.",
            difficulty: "beginner",
            estimatedHours: 60,
            baseXP: 1855,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/143924/en.subject.pdf",
            status: "completed",
            tags: ["Sorting algorithms", "Battery concept and handling elements", "Algorithm implementation", "Rigor", "Unix", "Algorithms & AI", "Imperative programming"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n  \n  - Remain polite, courteous, respectful and constructive throughout the\n  evaluation process. The well-being of the community depends on it.\n  \n  - Identify with the student or group whose work is evaluated the possible\n  dysfunctions in their project. Take the time to discuss and debate the\n  problems that may have been identified.\n  \n  - You must consider that there might be some differences in how your peers\n  might have understood the project's instructions and the scope of its\n  functionalities. Always keep an open mind and grade them as honestly as\n  possible. The pedagogy is useful only and only if the peer-evaluation is\n  done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/143924/en.subject.pdf"
                }, {
                    name: "checker_Mac",
                    url: "https://cdn.intra.42.fr/document/document/28487/checker_Mac"
                }, {
                    name: "checker_linux",
                    url: "https://cdn.intra.42.fr/document/document/28488/checker_linux"
                }],
                mandatory: {
                    title: "Mandatory part",
                    description: "Reminder : Remember that for the duration of the defence, no segfault, nor other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. This rule is active thoughout the whole defence.",
                    criteria: [{
                        id: "1",
                        name: "Memory leaks",
                        description: "Throughout the defence, pay attention to the amount of memory\n              used by push_swap (using the command top for example) in order\n              to detect any anomalies and ensure that allocated memory is\n              properly freed. If there is one memory leak (or more), the final\n              grade is 0.",
                        type: "boolean",
                        value: 0,
                        points: 15
                    }, {
                        id: "2",
                        name: "Error management",
                        description: 'In this section, we\'ll evaluate the push_swap\'s error management.\n              If at least one fails, no points will be awarded for this\n              section. Move to the next one.\n              \n              - Run push_swap with non numeric parameters. The program must\n              display "Error".\n              \n              - Run push_swap with a duplicate numeric parameter. The program\n              must display "Error".\n              \n              - Run push_swap with only numeric parameters including one greater\n              than MAXINT. The program must display "Error".\n              \n              - Run push_swap without any parameters. The program must not\n              display anything and give the prompt back.',
                        type: "boolean",
                        value: 0,
                        points: 15
                    }, {
                        id: "3",
                        name: "Push_swap - Identity test",
                        description: 'In this section, we\'ll evaluate push_swap\'s behavior when given\n              a list, which has already been sorted. Execute the following 3\n              tests. If at least one fails, no points will be awarded for this\n              section. Move to the next one.\n              \n              - Run the following command "$>./push_swap 42". The program\n              should display nothing (0 instruction).\n              \n              - Run the following command "$>./push_swap 2 3". The\n              program should display nothing (0 instruction).\n              \n              - Run the following command "$>./push_swap 0 1 2 3". The\n              program should display nothing (0 instruction).\n              \n              - Run the following command "$>./push_swap 0 1 2 3 4 5 6 7 8\n              9". The program should display nothing (0 instruction).\n              \n              - Run the following command "$>./push_swap \'Between 0 and 9 randomly\n              sorted values chosen>\'. The program should display nothing\n              (0 instruction).',
                        type: "boolean",
                        value: 0,
                        points: 15
                    }, {
                        id: "4",
                        name: "Push_swap - Simple version",
                        description: 'If the following tests fails, no points will be awarded for this\n              section. Move to the next one. Use the checker binary given on the\n              attachments.\n              \n              - Run "$>ARG="2 1 0"; ./push_swap $ARG | ./checker_OS $ARG".\n              Check that the checker program displays "OK" and that the\n              size of the list of instructions from push_swap is 2 OR 3.\n              Otherwise the test fails.\n              \n              - Run "$>ARG="\'Between 0 and 3 randomly values chosen\'"; ./push_swap\n              $ARG | ./checker_OS $ARG". Check that the checker program displays\n              "OK" and that the size of the list of instructions from push_swap\n              is between 0 AND 3. Otherwise the test fails.',
                        type: "boolean",
                        value: 0,
                        points: 15
                    }, {
                        id: "5",
                        name: "Another simple version",
                        description: 'Execute the following 2 tests. If at least one fails, no points\n              will be awarded for this section. Move to the next one. Use the checker\n              binary given on the attachments.\n              \n              - Run "$>ARG="1 5 2 4 3"; ./push_swap $ARG | ./checker_OS $ARG".\n              Check that the checker program displays "OK" and that the\n              size of the list of instructions from push_swap isn\'t more\n              than 12. Kudos if the size of the list of instructions is 8.\n              \n              - Run "$>ARG="<5 random values>"; ./push_swap $ARG | ./checker_OS\n              $ARG" and replace the placeholder by 5 random valid values.\n              Check that the checker program displays "OK" and that the\n              size of the list of instructions from push_swap isn\'t more\n              than 12. Otherwise this test fails. You\'ll have to\n              specifically check that the program wasn\'t developed to only\n              answer correctly on the test included in this scale. You\n              should repeat this test couple of times with several\n              permutations before you validate it.',
                        type: "boolean",
                        value: 0,
                        points: 15
                    }, {
                        id: "6",
                        name: "Push_swap - Middle version",
                        description: 'If the following test fails, no points will be awarded for this\n              section. Move to the next one. Move to the next one. Use the checker\n              binary given on the attachments.\n              \n              - Run "$>ARG="<100 random values>"; ./push_swap $ARG | ./checker_OS $ARG" and replace the placeholder by 100 random valid values. Check that the checker program displays "OK" and that the size of the list of instructions. Give points in accordance:\n              -   * less than 700: 5\n              -   * less than 900: 4\n              -   * less than 1100: 3\n              -   * less than 1300: 2\n              -   * less than 1500: 1 You\'ll have to specifically check that the program wasn\'t developed to only answer correctly on the test included in this scale. You should repeat this test couple of times with several permutations before you validate it.',
                        type: "progress",
                        value: 0,
                        points: 20,
                        maxProgress: 5
                    }, {
                        id: "7",
                        name: "Push_swap - Advanced version",
                        description: 'If the following test fails, no points will be awarded for this\n              section. Move to the next one. Move to the next one. Use the checker\n              binary given on the attachments.\n              \n              - Run "$>ARG="<500 random values>"; ./push_swap $ARG | ./checker_OS $ARG" and replace the placeholder by 500 random valid values (One is not called John/Jane Script for nothing). Check that the checker program displays "OK" and that the size of the list of instructions\n              -   * less than 5500: 5\n              -   * less than 7000: 4\n              -   * less than 8500: 3\n              -   * less than 10000: 2\n              -   * less than 11500: 1 You\'ll have to specifically check that the program wasn\'t developed to only answer correctly on the test included in this scale. You should repeat this test couple of times with several permutations before you validate it.',
                        type: "progress",
                        value: 0,
                        points: 20,
                        maxProgress: 5
                    }]
                },
                bonus: {
                    title: "Bonus",
                    description: "Reminder : Remember that for the duration of the defence, no segfault, nor other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. This rule is active throughout the whole defence. We will look at your bonuses if and only if your mandatory part is EXCELLENT. This means that you must complete the mandatory part, beginning to end, and your error management needs to be flawless, even in cases of twisted or bad usage. So if the mandatory part didn't score all the point during this defence bonuses will be totally IGNORED.",
                    criteria: [{
                        id: "8",
                        name: "Checker program - Error management",
                        description: 'In this section, we\'ll evaluate the checker\'s error management.\n              If at least one fails, no points will be awarded for this\n              section. Move to the next one.\n              \n              - Run checker with non numeric parameters. The program must\n              display "Error".\n              \n              - Run checker with a duplicate numeric parameter. The program\n              must display "Error".\n              \n              - Run checker with only numeric parameters including one greater\n              than MAXINT. The program must display "Error".\n              \n              - Run checker without any parameters. The program must not\n              display anything and give the prompt back.\n              \n              - Run checker with valid parameters, and write an action that\n              doesn\'t exist during the instruction phase. The program must\n              display "Error".\n              \n              - Run checker with valid parameters, and write an action with\n              one or several spaces before and/or after the action during\n              the instruction phase. The program must display "Error".',
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "9",
                        name: "Checker program - False tests",
                        description: 'In this section, we\'ll evaluate the checker\'s ability to manage\n              a list of instructions that doesn\'t sort the list. Execute the\n              following 2 tests. If at least one fails, no points will be\n              awarded for this section. Move to the next one.\n              \n              Don\'t forget to press CTRL+D to stop reading during the\n              intruction phase.\n              \n              - Run checker with the following command "$>./checker 0 9 1 8 2\n              7 3 6 4 5" then write the following valid action list "[sa,\n              pb, rrr]". Checker should display "KO".\n              \n              - Run checker with a valid list as parameter of your choice then\n              write a valid instruction list that doesn\'t order the\n              integers. Checker should display "KO". You\'ll have to\n              specifically check that the program wasn\'t developed to only\n              answer correctly on the test included in this scale. You\n              should repeat this test couple of times with several\n              permutations before you validate it.',
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "10",
                        name: "Checker program - Right tests",
                        description: 'In this section, we\'ll evaluate the checker\'s ability to manage\n              a list of instructions that sort the list. Execute the following\n              2 tests. If at least one fails, no points will be awarded for\n              this section. Move to the next one.\n              \n              Don\'t forget to press CTRL+D to stop reading during the\n              instruction phase.\n              \n              - Run checker with the following command "$>./checker 0 1 2"\n              then press CTRL+D without writing any instruction. The program\n              should display "OK".\n              \n              - Run checker with the following command "$>./checker 0 9 1 8 2"\n              then write the following valid action list "[pb, ra, pb, ra,\n              sa, ra, pa, pa]". The program should display "OK".\n              \n              - Run checker with a valid list as parameter of your choice then\n              write a valid instruction list that order the integers.\n              Checker must display "OK". You\'ll have to specifically check\n              that the program wasn\'t developed to only answer correctly on\n              the test included in this scale. You should repeat this test\n              couple of times with several permutations before you validate\n              it.',
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1334,
            id: "11",
            name: "Philosophers",
            description: "This project aims to teach concurrent programming, focusing on multithreading and multiprocessing.",
            difficulty: "beginner",
            estimatedHours: 70,
            baseXP: 3360,
            teamSize: {
                min: 2,
                max: 2
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/147346/en.subject.pdf",
            status: "completed",
            tags: ["Unix logic", "Rigor", "Unix", "Imperative programming"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/147346/en.subject.pdf"
                }],
                mandatory: {
                    title: "Mandatory part",
                    criteria: [{
                        id: "1",
                        name: "Error Handling",
                        description: "This project is to be coded in C, following the Norm.\n                Any crash, undefined behavior, memory leak, or norm error means 0 to\n                the project.\n                On some slow hardware, the project might not work properly. If some tests\n                don't work on your machine try to discuss it honestly before counting it\n                as false.",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }, {
                        id: "2",
                        name: "Global variables",
                        description: "Check if there is any global variable which is used to manage the shared\n                resources among the philosophers.\n                If you find such a nasty thing, the evaluation stops here. You can go on\n                and check the code, but do not grade the exercises.",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }, {
                        id: "3",
                        name: "philo code",
                        description: "- Ensure the code of philo complies with the following requirements and ask for explanations.\n                - Check there is one thread per philosopher.\n                - Check there is only one fork per philosopher.\n                - Check if there is a mutex per fork and that it's used to check the fork value and/or change it.\n                - Check the outputs are never mixed up.\n                - Check how the death of a philosopher is verified and if there is a mutex to prevent a philosopher from dying and starting eating at the same time.",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }, {
                        id: "4",
                        name: "philo testing",
                        description: "- Do not test with more than 200 philosophers.\n                - Do not test with time_to_die or time_to_eat or time_to_sleep set to values lower than 60 ms.\n                - Test 1 800 200 200. The philosopher should not eat and should die.\n                - Test 5 800 200 200. No philosopher should die.\n                - Test 5 800 200 200 7. No philosopher should die and the simulation should stop when every philosopher has eaten at least 7 times.\n                - Test 4 410 200 200. No philosopher should die.\n                - Test 4 310 200 100. One philosopher should die.\n                - Test with 2 philosophers and check the different times: a death delayed by more than 10 ms is unacceptable.\n                - Test with any values of your choice to verify all the requirements. Ensure philosophers die at the right time, that they don't steal forks, and so forth.",
                        type: "boolean",
                        value: 0,
                        points: 25
                    }]
                },
                bonus: {
                    title: "Bonus part",
                    criteria: [{
                        id: "5",
                        name: "philo_bonus code",
                        description: "- Ensure the code of philo_bonus complies with the following requirements and ask for explanations.\n                - Check that there is one process per philosopher and that the main process is not a philosopher.\n                - Check that there are no orphan processes at the end of the execution of this program.\n                - Check if there is a single semaphore that represents the number of forks.\n                - Check the output is protected against multiple access. To avoid a scrambled display.\n                - Check how the death of a philosopher is verified and if there is a semaphore to prevent a philosopher from dying and starting eating at the same time.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "6",
                        name: "philo_bonus testing",
                        description: "- Do not test with more than 200 philosophers.\n                - Do not test with time_to_die or time_to_eat or time_to_sleep set to values lower than 60 ms.\n                - Test 5 800 200 200. No philosopher should die.\n                - Test 5 800 200 200 7. No philosopher should die and the simulation should stop when every philosopher has eaten at least 7 times.\n                - Test 4 410 200 200. No philosopher should die.\n                - Test 4 310 200 100. One philosopher should die.\n                - Test with 2 philosophers and check the different times: a death delayed by more than 10 ms is unacceptable.\n                - Test with any values of your choice to verify all the requirements. Ensure philosophers die at the right time, that they don't steal forks, and so forth.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1331,
            id: "12",
            name: "minishell",
            description: "The objective of this project is for you to create a simple shell.",
            difficulty: "intermediate",
            estimatedHours: 210,
            baseXP: 2814,
            teamSize: {
                min: 2,
                max: 2
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/136337/en.subject.pdf",
            status: "completed",
            tags: ["Unix logic", "Rigor", "Unix", "Imperative programming"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/136337/en.subject.pdf"
                }],
                mandatory: {
                    title: "Mandatory part",
                    criteria: [{
                        id: "1",
                        name: "Compile",
                        description: '- Use "make -n" to see if compilation use "-Wall -Wextra -Werror". If not, select the "invalid compilation" flag.\n                - minishell compiles without any errors. If not, select the flag.\n                - The Makefile must not re-link. If not, select the flag.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "2",
                        name: "Simple Command & global variables",
                        description: '- Execute a simple command with an absolute path like /bin/ls, or any other command without any options.\n                - How many global variables are used? Why? Ask the evaluated student to give you a concrete example of why it feels mandatory or logical.\n                - Check the global variable. This global variable cannot provide any other information or data access than the number of a received signal.\n                - Test an empty command.\n                - Test only spaces or tabs.\n                - If something crashes, select the "crash" flag.\n                - If something doesn\'t work, select the "incomplete work" flag.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "3",
                        name: "Arguments",
                        description: '- Execute a simple command with an absolute path like /bin/ls, or any other command with arguments but without any quotes or double quotes.\n                - Repeat multiple times with different commands and arguments.\n                - If something crashes, select the "crash" flag.\n                - If something doesn\'t work, select the "incomplete work" flag.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "4",
                        name: "echo",
                        description: '- Execute the echo command with or without arguments, or the -n option.\n                - Repeat multiple times with different arguments.\n                - If something crashes, select the "crash" flag.\n                - If something doesn\'t work, select the "incomplete work" flag.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "5",
                        name: "exit",
                        description: '- Execute exit command with or without arguments.\n                - Repeat multiple times with different arguments.\n                - Don\'t forget to relaunch the minishell\n                - If something crashes, select the "crash" flag.\n                - If something doesn\'t work, select the "incomplete work" flag.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "6",
                        name: "Return value of a process",
                        description: '- Execute a simple command with an absolute path like /bin/ls, or any other command with arguments but without any quotes and double quotes. Then execute echo $?\n                - Check the printed value. You can do the same in bash in order to compare the results.\n                - Repeat multiple times with different commands and arguments. Try some wrong commands like \'/bin/ls filethatdoesntexist\'\n                - Try anything like expr $? + $?\n                - If something crashes, select the "crash" flag.\n                - If something doesn\'t work, select the "incomplete work" flag.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "7",
                        name: "Signals",
                        description: '- ctrl-C in an empty prompt should display a new line with a new prompt.\n                - ctrl- in an empty prompt should not do anything.\n                - ctrl-D in an empty prompt should quit minishell --\x3e RELAUNCH!\n                - ctrl-C in a prompt after you wrote some stuff should display a new line with a new prompt.\n                - The buffer should be clean too. Press "Enter" to make sure nothing from the previous line is executed.\n                - ctrl-D in a prompt after you wrote some stuff should not do anything.\n                - ctrl- in a prompt after you wrote some stuff should not do anything.\n                - Try ctrl-C after running a blocking command like cat without arguments or grep “something“.\n                - Try ctrl- after running a blocking command like cat without arguments or grep “something“.\n                - Try ctrl-D after running a blocking command like cat without arguments or grep “something“.\n                - Repeat multiple times using different commands.\n                - If something crashes, select the "crash" flag.\n                - If something doesn\'t work, select the "incomplete work" flag.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "8",
                        name: "Double Quotes",
                        description: '- Execute a simple command with arguments and, this time, use also double quotes (you should try to include whitespaces too).\n                - Try a command like : echo "cat lol.c | cat > lol.c"\n                - Try anything except $.\n                - If something crashes, select the "crash" flag.\n                - If something doesn\'t work, select the "incomplete work" flag.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "9",
                        name: "Single Quotes",
                        description: "- Execute commands with single quotes as arguments.\n                - Try empty arguments.\n                - Try environment variables, whitespaces, pipes, redirection in the single quotes.\n                - echo '$USER' must print \"$USER\".\n                - Nothing should be interpreted.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "10",
                        name: "env",
                        description: "- Check if env shows you the current environment variables.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "11",
                        name: "export",
                        description: "- Export environment variables, create new ones and replace old ones.\n                - Check the result with env.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "12",
                        name: "unset",
                        description: "- Export environment variables, create new ones and replace old ones.\n                - Use unset to remove some of them.\n                - Check the result with env.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "13",
                        name: "cd",
                        description: "- Use the command cd to move the working directory and check if you are in the right directory with /bin/ls\n                - Repeat multiple times with working and not working cd\n                - Also, try '.' and '..' as arguments.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "14",
                        name: "pwd",
                        description: "- Use the command pwd.\n                - Repeat multiple times in different directories.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "15",
                        name: "Relative Path",
                        description: "- Execute commands but this time use a relative path.\n                - Repeat multiple times in different directories with a complex relative path (lots of ..).",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "16",
                        name: "Environment path",
                        description: "- Execute commands but this time without any path (ls, wc, awk and so forth).\n                - Unset the $PATH and ensure commands are not working anymore.\n                - Set the $PATH to a multiple directory value (directory1:directory2) and ensure that directories are checked in order from left to right.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "17",
                        name: "Redirection",
                        description: "- Execute commands with redirections < and/or >\n                - Repeat multiple times with different commands and arguments and sometimes change > with >>\n                - Check if multiple tries of the same redirections fail.\n                - Test << redirection (it doesn't have to update the history).",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "18",
                        name: "Pipes",
                        description: "- Execute commands with pipes like 'cat file | grep bla | more'\n                - Repeat multiple times with different commands and arguments.\n                - Try some wrong commands like 'ls filethatdoesntexist | grep bla | more'\n                - Try to mix pipes and redirections.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "19",
                        name: "Go Crazy and history",
                        description: "- Type a command line, then use ctrl-C and press \"Enter\". The buffer should be clean and there should be nothing left to execute.\n                - Can we navigate through history using Up and Down? Can we retry some command?\n                - Execute commands that should not work like 'dsbksdgbksdghsd'. Ensure minishell doesn't crash and prints an error.\n                - 'cat | cat | ls' should behave in a \"normal way\".\n                - Try to execute a long command with a ton of arguments.\n                - Have fun with that beautiful minishell and enjoy it!",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "20",
                        name: "Environment variables",
                        description: '- Execute echo with some environment variables ($variable) as arguments.\n                - Check that $ is interpreted as an environment variable.\n                - Check that double quotes interpolate $.\n                - Check that USER exists. Otherwise, set it.\n                - echo "$USER" should print the value of the USER variable.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }]
                },
                bonus: {
                    title: "Bonus part",
                    description: "Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.",
                    criteria: [{
                        id: "21",
                        name: "And, Or",
                        description: "Use &&, || and parenthesis with commands and ensure minishell behaves the same way bash does.",
                        type: "boolean",
                        value: 0,
                        points: 14
                    }, {
                        id: "22",
                        name: "Wildcard",
                        description: "Use wildcards in arguments in the current working directory.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "23",
                        name: "Surprise! (or not...)",
                        description: '- Set the USER environment variable.\n                - echo "\'$USER\'" should print the value of the USER variable.\n                - echo \'"$USER"\' should print "$USER".',
                        type: "boolean",
                        value: 0,
                        points: 1
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1326,
            id: "13",
            name: "cub3d",
            description: "This project is inspired by the world-famous eponymous 90's game, which was the first FPS ever. It will enable you to explore ray-casting. Your goal will be to make a dynamic view inside a maze, in which you'll have to find your way.",
            difficulty: "intermediate",
            estimatedHours: 280,
            baseXP: 5775,
            teamSize: {
                min: 2,
                max: 2
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/134785/en.subject.pdf",
            status: "completed",
            tags: ["Applicative", "Rigor", "Algorithms & AI", "Imperative programming", "Graphics"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/134785/en.subject.pdf"
                }, {
                    name: "minilibx-linux.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26162/minilibx-linux.tgz"
                }, {
                    name: "minilibx-opengl.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26163/minilibx_opengl.tgz"
                }, {
                    name: "minilibx_mms_20200219_beta.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26164/minilibx_mms_20200219_beta.tgz"
                }],
                mandatory: {
                    title: "Mandatory part",
                    criteria: [{
                        id: "1",
                        name: "Executable name",
                        description: "Check that the project compiles well (without re-link) when you execute the make\n                              command and that the executable name is cub3D.\n                              If not, use the invalid compilation flag at the end of the scale.",
                        type: "boolean",
                        value: 0,
                        points: 14.3
                    }, {
                        id: "2",
                        name: "Configuration file",
                        description: "Check that you can configure ALL the following elements in the configuration file.\n                              The formating has to be as described in the subject.\n    \n                              - north texture path - NO\n                              - east texture path - EA\n                              - south texture path - SO\n                              - west texture path - WE\n                              - floor color - F\n                              - ceiling color - C\n                              - the map (see subject for the map configuration details)\n    \n                              Also, check that the program returns an error and exits properly when\n                              the configuration file is misconfigured (for example an unknown key, double keys,\n                              an invalid path..) or if the filename doesn't end with the .cub extension.\n    \n                              If not, the defense is over and use the appropriate flag incomplete work, crash...",
                        type: "boolean",
                        value: 0,
                        points: 14.3
                    }, {
                        id: "3",
                        name: "Technical elements of the display",
                        description: "We're going to evaluate the technical elements of the display. Run the\n                              program and execute the following tests. If at least one\n                              fails, no points will be awarded for this section. Move to the next one.\n    \n                              - A window must open at the launch of the program.\n                              It must stay open during the whole execution.\n    \n                              - An image representing the inside of a maze must be displayed inside the window.\n    \n                              - Hide all or part of the window either by using another window\n                              or by using the screen's borders, then minimize the windows\n                              and maximize it back. In all cases, the content of the window\n                              must remain consistent.",
                        type: "boolean",
                        value: 0,
                        points: 14.3
                    }, {
                        id: "4",
                        name: "User basic events",
                        description: "In this section, we're going to evaluate the program's user\n                              generated events. Execute the 3 following tests. If at least one\n                              fails, this means that no points will be awarded for this section.\n                              Move to the next one.\n    \n                              - Click the red cross at the top left of the window. The\n                              window must close and the program must exit cleanly.\n    \n                              - Press the ESC key. The window must close and the program\n                              must exit cleanly. In the case of this test, we will accept\n                              that another key exits the program, for example, Q.\n    \n                              - Press the four movement keys (we'll accept WASD or ZQSD keys)\n                              in the order of your liking. Each key press must render a\n                              visible result on the window, such as a player's movement/rotation.",
                        type: "boolean",
                        value: 0,
                        points: 14.3
                    }, {
                        id: "5",
                        name: "Movements",
                        description: "In this section, we'll evaluate the implementation of the player's movement/orientation inside the maze.\n                              Execute the 5 following tests. If at least one fails, this means that no points will be awarded for this section.\n    \n                              - The player's spawning orientation on the first image must be in accordance\n                              with the configuration file, test for each cardinal orientation (N, S, E, W).\n    \n                              - Press the left arrow then the right arrow.\n                              The player's view must rotate to the left\n                              then to the right as if the player’s head was moving.\n    \n                              - Press W (or Z) then S.\n                              The player's view must go forward and then backward in a\n                              straight line.\n    \n                              - Press A (or Q) then D.\n                              The player's view must go to the left and then to the right in a\n                              straight line.\n    \n                              - During those four movements, was the display smooth? By\n                              smooth we mean is the game \"playable\" or is it slow.",
                        type: "boolean",
                        value: 0,
                        points: 14.3
                    }, {
                        id: "6",
                        name: "Walls",
                        description: "In this section, we'll evaluate the walls in the maze.\n                              Execute the 4 following tests. If at least one\n                              fails, this means that no points will be awarded for this section.\n    \n                              - The wall's texture vary depending on which compass point the wall is facing\n                              (north, south, east, west).\n                              Check that the textures on the walls and perspective are\n                              visible and correct.\n    \n                              - Check that if you modify the path of a wall texture in the configuration file,\n                              it modifies the rendered texture when the program is re-executed.\n    \n                              - Also check that if you set a non-existent path it raises an error.\n    \n                              - Check that the floor and ceiling colors are well handled when you modify them in the configuration file.",
                        type: "boolean",
                        value: 0,
                        points: 14.3
                    }, {
                        id: "7",
                        name: "Error management",
                        description: "In this section, we’ll evaluate the program's error management\n                              and reliability. Execute the 4 following tests. If at least one\n                              fails, this means that no points will be awarded for this section.\n                              Move to the next one.\n    \n                              - Run the program using numerous arguments and random values.\n                              Even if the program doesn't require any arguments, it is\n                              critical that those arguments don’t alternate or create\n                              unhandled errors.\n    \n                              - Check that there are no memory leaks. You can use the\n                              top or leaks command in another shell to monitor that the memory\n                              use is stable. The memory used must not increase each time an\n                              action is made.\n    \n                              - Roll either your arm or your face on the keyboard. The program\n                              must not show any strange behaviors and it must stay functional.\n    \n                              - Modify the map. The program must not show any strange behaviors\n                              and it must stay functional if the map is well configured, if not it must raise an error.",
                        type: "boolean",
                        value: 0,
                        points: 14.2
                    }]
                },
                bonus: {
                    title: "Bonus",
                    criteria: [{
                        id: "8",
                        name: "When I'll be older I'll be John Carmack",
                        description: "Look at the subject bonus part and add one point for each bonus implemented and fully functional.",
                        type: "progress",
                        value: 0,
                        points: 25,
                        maxProgress: 5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1315,
            id: "14",
            name: "miniRT",
            description: "This project is an introduction to the beautiful world of Raytracing.",
            difficulty: "intermediate",
            estimatedHours: 280,
            baseXP: 5775,
            teamSize: {
                min: 2,
                max: 2
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/147348/en.subject.pdf",
            status: "not_started",
            tags: ["Applicative", "Rigor", "Algorithms & AI", "Imperative programming", "Graphics"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/147348/en.subject.pdf"
                }, {
                    name: "minilibx-linux.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26162/minilibx-linux.tgz"
                }, {
                    name: "minilibx-opengl.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26163/minilibx_opengl.tgz"
                }, {
                    name: "minilibx_mms_20200219_beta.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26164/minilibx_mms_20200219_beta.tgz"
                }],
                mandatory: {
                    title: "Mandatory part",
                    criteria: [{
                        id: "1",
                        name: "Executable name",
                        description: "Check that the project compiles well (without re-link) when you excute the 'make' command and that the executable name is 'miniRT'.",
                        type: "boolean",
                        value: 0,
                        points: 12
                    }, {
                        id: "2",
                        name: "Configuration file",
                        description: "Check that you can configure camera, light, the ambient light ratio and simple objects in the configuration file in accordance with the format described in the subject. Also check that the program returns an error and exits properly when the configuration file is misconfigured or if the filename doesn't end with the '.rt' extension.\n\n                If not, the defence is over and the final grade will be 0.",
                        type: "boolean",
                        value: 0,
                        points: 11
                    }, {
                        id: "3",
                        name: "Technical elements of the display",
                        description: "In this section we'll evaluate Technical elements of the display. Run the program and execute the following tests. If at least one fails, no points will be awarded for this section. Move to the next one.\n\n                - With only one parameter a window must open when launching the program and stay open during the program's whole execution.\n                \n                - Hide either part of the window or the whole window with another window or the screen's borders, minimize the minirt window to the dock/taskbar and maximize it back. In every case, the window's content must remain consistant (minirt should not quit and should still display properly its content).\n                \n                - When you change the window resolution, the window's content must remain consistant.\n                \n                - Pressing 'ESC' or clicking the red cross of the window exits the program properly.",
                        type: "boolean",
                        value: 0,
                        points: 11
                    }, {
                        id: "4",
                        name: "The Basic Shapes",
                        description: "In this section we'll evaluate the 3 basic shapes. Run the program and execute the following 3 tests. If at least one fails, no points will be awarded for this section. Move to the next one.\n\n                - Place a sphere at the coordinates {0, 0, 0}. With the camera facing the sphere, display the rendered image. The sphere should be visible and displayed without glitching.\n                \n                - Place a plane with a 'z' value of null. With the camera facing the plane, display the rendered image. The plane should be visible and displayed without glitching.\n                \n                - Place a cylinder extending along the y axis. With the camera facing the cylinder, display the rendered image. The cylinder should be visible and displayed without glitching.",
                        type: "boolean",
                        value: 0,
                        points: 11
                    }, {
                        id: "5",
                        name: "Translations and rotations",
                        description: "In this section we'll evaluate that rotation and translation\n                transformations can be applied on the scene's objects. Run the\n                program and execute the following tests. If at least one\n                fails, no points will be awarded for this section. Move to\n                the next one.\n                \n                - Place two spheres at the coordinates {0, 0, 0},\n                the camera facing those spheres. Then put a translation\n                on one of the two spheres oriented in a direction parallel\n                to the camera's, of a greater distance than the sphere's\n                diameter and display the rendered image. Both spheres should\n                be visible and displayed without glitching.\n                \n                - Place a cylinder extending along the y axis, the camera facing\n                the cylinder. Then put a 90\xb0 rotation (PI/2 radian) along\n                the z axis and display the rendered image. The cylinder\n                should be visible and displayed without glitching.",
                        type: "boolean",
                        value: 0,
                        points: 11
                    }, {
                        id: "6",
                        name: "Multi-objects",
                        description: "In this section we'll evaluate that it's possible to put several object in one scene. Run the program and execute the following tests. If at least one fails, no points will be awarded for this section. Move to the next one.\n\n                - Place several intersecting objects on the scene, such as for example a sphere and a cylinder, and display the rendered image. Both objects should be visible and displayed without glitching. (especially where both object intersect)\n                \n                - Execute the same test, but ensure it's possible to place the same object several times, for example two cylinders, two spheres and a plane.",
                        type: "boolean",
                        value: 0,
                        points: 11
                    }, {
                        id: "7",
                        name: "Camera's position and direction",
                        description: "In this section we'll evaluate that the camera conditions of the subject are respected. Run the program and execute the following tests. If at least one fails, no points will be awarded for this section. Move to the next one.\n\n                - Generate a random scene and place the camera extending along the x axis pointed towards the coordinates {0, 0, 0} and display the rendered image. The scene must be visible and displayed without glitching.\n                \n                - Generate a random scene and place the camera extending along the y axis pointed towards the coordinates {0, 0, 0} and display the rendered image. The scene must be visible and displayed without glitching.\n                \n                - Generate a random scene and place the camera extending along the z axis pointed towards the coordinates {0, 0, 0} and display the rendered image. The scene must be visible and displayed without glitching.\n                \n                - Generate a random scene and place the camera at a random location which isn't on any axis or a diagonal, pointed towards the coordinates {0, 0, 0} and display the rendered image. The scene must be visible and displayed without glitching.",
                        type: "boolean",
                        value: 0,
                        points: 11
                    }, {
                        id: "8",
                        name: "Brightness 1/2",
                        description: "n this section we'll evaluate brightness on the scene's objects. Run the program and execute the following tests. If at least one fails, no points will be awarded for this section. Move to the next one.\n\n                - Place a sphere at the coordinates {0, 0, 0}, the camera facing the sphere, and put a spot left or right of the camera but positioned in such a way that the sphere will be lit sideways.\n                \n                Display the rendered image. The sphere should be visible, illuminated and displayed without glitching.\n                \n                - Place a sphere at some coordinates resulting from a translation, the camera facing the sphere, and place a spot left or right of the camera but positioned in such a way that the sphere will be lit sideways. Display the rendered image. The sphere should be visible, properly illuminated and displayed without glitch. Properly means that the halo of light should be computed after translation not before.",
                        type: "boolean",
                        value: 0,
                        points: 11
                    }, {
                        id: "9",
                        name: "Brightness 2/2",
                        description: "In this section we'll evaluate shadow management generated by the scene's objects. Run the program and execute the following tests. If at least one fails, no points will be awarded for this section. Move to the next one.\n\n                - Place a vertical spot, a sphere and a plane. The spot lighting the sphere's position to create a sphere shadow on the plane. Put the camera aside so we can see the sphere, the plane and the sphere's shadow on the plane. The shadow must be properly displayed without glitching.\n                \n                - Put a complex scene together with several objects like on illustration V.6 page 10 of the subject. Shadows must be properly displayed without glitching.",
                        type: "boolean",
                        value: 0,
                        points: 11
                    }]
                },
                bonus: {
                    title: "Bonus",
                    description: "We will look at your bonuses if and only if your mandatory part is excellent. This means that your must complete the mandatory part, beginning to end, and your error management must be flawless, even in cases of twisted or bad usage. So if the mandatory part didn't score all the point during this defence bonuses will be totally ignored.",
                    criteria: [{
                        id: "10",
                        name: "Many bonuses?",
                        description: "One point per bonus.\n\n                - Specular reflection.\n                - Color disruption: checkerboard.\n                - Colored and multi-spot lights.\n                - One other 2nd degree object: Cone, Hyperboloid, Paraboloid..\n                - Handle bump map textures./li>",
                        type: "progress",
                        value: 0,
                        points: 25,
                        maxProgress: 5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 2007,
            id: "15",
            name: "NetPractice",
            description: "NetPractice is a general practical exercise to let you discover networking.",
            difficulty: "intermediate",
            estimatedHours: 50,
            baseXP: 3160,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/136343/en.subject.pdf",
            status: "completed",
            tags: ["Rigor", "Network & system administration"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/136343/en.subject.pdf"
                }, {
                    name: "net_practice.1.5.tgz",
                    url: "https://cdn.intra.42.fr/document/document/26608/net_practice.1.5.tgz"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag of the scale. Please do this calmly, wisely and use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Simple preliminaries",
                        description: "- Defense can only happen if the student being evaluated is present. This way everybody improves: by exchanging ideas and sharing knowledge with each other.\n                - Nothing submitted (or wrong file or directory) means 0, and the evaluation process ends.\n                - In order to grade your peer, you have to clone their Git repository on your machine.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                },
                general: {
                    title: "General instructions",
                    criteria: [{
                        id: "2",
                        name: "General instructions",
                        description: "- Ensure that 10 files (1 per level) are present at the root of the repository. Ensure that they are not empty.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                },
                mandatory: {
                    title: "Mandatory part",
                    description: "- This project is about configuring small-scale networks that have issues to make them run. You have to download the file attached to the project's page (the evaluated student can show you where it is). Then, run the index.html file. A page will open in your web browser. Leave the login field empty to start the 'correction' mode. The evaluated student must solve correctly all of the levels in 15 minutes maximum. Using internet or any external resource to find answers is, of course, forbidden. The use of a simple calculator such as \"bc\" is tolerated but it will be the limit. You can ask questions about the different levels to the evaluated student.",
                    criteria: [{
                        id: "3",
                        name: "Level 1",
                        description: "If something does not work as expected or is not clearly explained, the\n                evaluation process ends now.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }, {
                        id: "4",
                        name: "Level 2",
                        description: "If something does not work as expected or is not clearly explained, the\n                evaluation process ends now.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }, {
                        id: "5",
                        name: "Level 3",
                        description: "If something does not work as expected or is not clearly explained, the\n                evaluation process ends now.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                },
                totalPoints: 100
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1338,
            id: "16",
            name: "CPP Module 00",
            description: "This first module of C++ is designed to help you understand the specifities of the language when compared to C. Time to dive into Object Oriented Programming!",
            difficulty: "beginner",
            estimatedHours: 22,
            baseXP: 0,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/143922/en.subject.pdf",
            status: "completed",
            tags: ["Imperative programming", "Object-oriented programming", "Rigor"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/143922/en.subject.pdf"
                }, {
                    name: "Account.hpp",
                    url: "https://cdn.intra.42.fr/document/document/28484/Account.hpp"
                }, {
                    name: "19920104_091532.log",
                    url: "https://cdn.intra.42.fr/document/document/28485/19920104_091532.log"
                }, {
                    name: "tests.cpp",
                    url: "https://cdn.intra.42.fr/document/document/28486/tests.cpp"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Prerequisites",
                        description: 'The code must compile with c++ and the flags -Wall -Wextra -Werror\n                Don\'t forget this project has to follow the C++98 standard. Thus,\n                C++11 (and later) functions or containers are NOT expected.\n                \n                Any of these means you must not grade the exercise in question:\n                \n                * A function is implemented in a header file (except for template functions).\n                * A Makefile compiles without the required flags and/or another compiler than c++.\n                \n                Any of these means that you must flag the project with "Forbidden\n                Function":\n                \n                * Use of a "C" function (*alloc, *printf, free).\n                * Use of a function not allowed in the exercise guidelines.\n                * Use of "using namespace <ns_name>" or the "friend" keyword.\n                * Use of an external library, or features from versions other than C++98.',
                        type: "boolean",
                        value: 0,
                        points: 40
                    }]
                },
                otherSections: [{
                    title: "Exercise 00: Megaphone",
                    description: "This exercise is a warm-up to discover basic C++ I/O streams.",
                    criteria: [{
                        id: "2",
                        name: "Is it working?",
                        description: "This exercise is about developing a to_upper program with a specific\n                  behavior when run without any parameter. This has to be solved in a C++\n                  approach (strings/upper).",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                }, {
                    title: "Exercise 01: My Awesome Phonebook",
                    description: "This exercise is about writing simple classes and a small interactive program that uses them. If the exercise is not fully functional, grade what can be graded.",
                    criteria: [{
                        id: "3",
                        name: "Error handling",
                        description: "This exercise requires a few error handling but there are no expected behaviors in the subject. Quitting or other handling is fine. Segfault is not! :D",
                        type: "progress",
                        value: 0,
                        points: 2,
                        maxProgress: 5
                    }, {
                        id: "4",
                        name: "The EXIT command",
                        description: "Rate the EXIT command as described in the subject.",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "5",
                        name: "Visibility",
                        description: "The attributes of the class Contact should be private. The class should\n                  expose the corresponding accessors.Also, check that anything that will\n                  always be used inside a class (not only in the Contact class) is private,\n                  and that anything that can be used outside a class is public. Beginners\n                  tend to put everything in public, that's not what you want here!",
                        type: "progress",
                        value: 0,
                        points: 3,
                        maxProgress: 5
                    }, {
                        id: "6",
                        name: "The Contact and the Phonebook classes",
                        description: "The code must have a Contact class (or whatever name the student gave).\n                  This class must have attributes for each contact fields. There also must\n                  be a Phonebook class containing an array of Contacts.",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "7",
                        name: "Read/Eval loop",
                        description: "The program must have a kind of read/eval loop: reading the input,\n                  processing it, then wait again for another command until an EXIT\n                  command is entered. This loop should be done in a C++ manner (std::cin)!",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "8",
                        name: "The ADD command",
                        description: "Rate the ADD command as described in the subject.",
                        type: "progress",
                        value: 0,
                        points: 3,
                        maxProgress: 5
                    }, {
                        id: "9",
                        name: "The SEARCH command",
                        description: "Rate the SEARCH command as described in the subject. The formatting of the output can be different, it doesn't matter. This part is about using C++ iomanips and that's what you should focus on.",
                        type: "progress",
                        value: 0,
                        points: 3,
                        maxProgress: 5
                    }]
                }, {
                    title: "Exercise 02: The Job Of Your Dreams",
                    description: "This exercise intends to extract information and directions from useless noise, and to insert new code into an existing context.",
                    criteria: [{
                        id: "10",
                        name: "Did you save the day?",
                        description: "This exercise is pretty straightforward. Either Account.cpp works, either it does not. Compare the program's output and the provided logs. Any difference (except for the timestamps or the order of the destructors) means the exercise is incorrect.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                }],
                totalPoints: 100
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1339,
            id: "17",
            name: "CPP Module 01",
            description: "This first module of C++ is designed to help you understand the specifities of the language when compared to C. Time to dive into Object Oriented Programming!",
            difficulty: "beginner",
            estimatedHours: 12,
            baseXP: 0,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/141056/en.subject.pdf",
            status: "completed",
            tags: ["Imperative programming", "Object-oriented programming", "Rigor"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/141056/en.subject.pdf"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Prerequisites",
                        description: 'The code must compile with c++ and the flags -Wall -Wextra -Werror\n                Don\'t forget this project has to follow the C++98 standard. Thus,\n                C++11 (and later) functions or containers are NOT expected.\n                \n                Any of these means you must not grade the exercise in question:\n                \n                * A function is implemented in a header file (except for template functions).\n                * A Makefile compiles without the required flags and/or another compiler than c++.\n                \n                Any of these means that you must flag the project with "Forbidden\n                Function":\n                \n                * Use of a "C" function (*alloc, *printf, free).\n                * Use of a function not allowed in the exercise guidelines.\n                * Use of "using namespace <ns_name>" or the "friend" keyword.\n                * Use of an external library, or features from versions other than C++98.',
                        type: "boolean",
                        value: 0,
                        points: 18
                    }]
                },
                otherSections: [{
                    title: "Exercise 00: BraiiiiiiinnnzzzZ",
                    description: "The goal of this exercise is to understand how to allocate memory in C++.",
                    criteria: [{
                        id: "2",
                        name: "Makefile and tests",
                        description: "There is a Makefile that compiles using the appropriate flags.\n                  There is at least a main to test the exercise.",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "3",
                        name: "Zombie Class",
                        description: 'There is a Zombie Class.\n                  It has a private name attribute.\n                  It has at least a constructor.\n                  It has a member function announce( void ) that prints: "<name>: BraiiiiiiinnnzzzZ..."\n                  The destructor prints a debug message that includes the name of the zombie.',
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "4",
                        name: "newZombie",
                        description: "There is a newZombie() function prototyped as: [ Zombie* newZombie( std::string name ); ]\n                  It should allocate a Zombie on the heap and return it.\n                  Ideally, it should call the constructor that takes a string and initializes\n                  the name.\n                  The exercise should be marked as correct if the Zombie can announce itself\n                  with the name passed to the function.\n                  There are tests to prove everything works.\n                  The zombie is deleted correctly before the end of the program.",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "5",
                        name: "randomChump",
                        description: "There is a randomChump() function prototyped as: [ void randomChump( std::string name ); ]\n                  It should create a Zombie on the stack, and make it announce itself.\n                  Ideally the zombie should be allocated on the stack (so implicitly deleted\n                  at the end of the function). It can also be allocated on the heap and then\n                  explicitly deleted.\n                  The student must justify their choices.\n                  There are tests to prove everything works.",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }]
                }, {
                    title: "Exercise 01: Moar brainz!",
                    description: "The goal of this exercise is to allocate a number of objects at the same time using new[], initialize them, and to properly delete them.",
                    criteria: [{
                        id: "6",
                        name: "Makefile and tests",
                        description: "There is a Makefile that compiles using the appropriate flags.\n                  There is at least a main to test the exercise.",
                        type: "boolean",
                        value: 0,
                        points: 6
                    }, {
                        id: "7",
                        name: "zombieHorde",
                        description: "The Zombie Class has a default constructor.\n                  There is a zombieHorde() function prototyped as: [ Zombie* zombieHorde( int N, std::string name ); ]\n                  It allocates N zombies on the heap explicitly using new[].\n                  After the allocation, there is an initialization of the objects to set their name.\n                  It returns a pointer to the first zombie.\n                  There are enough tests in the main to prove the previous points.\n                  Like: calling announce() on all the zombies.\n                  Last, all the zombies should be deleted at the same time in the main.",
                        type: "boolean",
                        value: 0,
                        points: 6
                    }]
                }, {
                    title: "Exercise 02: HI THIS IS BRAIN",
                    description: "Demystify references! Demystify references! Demystify references! Demystify references! Demystify references! Demystify references! Demystify references! Demystify references! Demystify references! Demystify references! Demystify references! Demystify references!",
                    criteria: [{
                        id: "8",
                        name: "Makefile and tests",
                        description: "There is a Makefile that compiles using the appropriate flags.\n                  There is at least a main to test the exercise.",
                        type: "boolean",
                        value: 0,
                        points: 6
                    }, {
                        id: "9",
                        name: "HI THIS IS BRAIN",
                        description: 'There is a string containing "HI THIS IS BRAIN".\n                  stringPTR is a pointer to the string.\n                  stringREF is a reference to the string.\n                  The address of the string is displayed using the string variable, the\n                  stringPTR and the stringREF.\n                  The variable content is displayed using the stringPTR and the stringREF.',
                        type: "boolean",
                        value: 0,
                        points: 6
                    }]
                }, {
                    title: "Exercise 03: Unnecessary violence",
                    description: "The objective of this exercise is to understand that pointers and references present some small differences that make them less or more appropriate depending on the use and the lifecycle of the object used.",
                    criteria: [{
                        id: "10",
                        name: "Makefile and tests",
                        description: "There is a Makefile that compiles using the appropriate flags.\n                  There is at least a main to test the exercise.",
                        type: "boolean",
                        value: 0,
                        points: 4
                    }, {
                        id: "11",
                        name: "Weapon",
                        description: "There is a Weapon class that has a type string, a getType() and a setType().\n                  The getType() function returns a const reference to the type string.",
                        type: "boolean",
                        value: 0,
                        points: 4
                    }, {
                        id: "12",
                        name: "HumanA and HumanB",
                        description: "HumanA can have a reference or a pointer to the Weapon.\n                  Ideally, it should be implemented as a reference, since the Weapon exists\n                  from creation until destruction, and never changes.\n                  HumanB must have a pointer to a Weapon since the field is not set at\n                  creation time, and the weapon can be NULL.",
                        type: "boolean",
                        value: 0,
                        points: 4
                    }]
                }, {
                    title: "Exercise 04: Sed is for losers",
                    description: "Thanks to this exercise, the student should have gotten familiar with ifstream and ofstream.",
                    criteria: [{
                        id: "13",
                        name: "Makefile and tests",
                        description: "There is a Makefile that compiles using the appropriate flags.\n                  There is at least a main to test the exercise.",
                        type: "boolean",
                        value: 0,
                        points: 6
                    }, {
                        id: "14",
                        name: "Exercise 04",
                        description: "There is a function replace (or other name) that works as specified in the\n                  subject.\n                  The error management is efficient: try to pass a file that does not exist,\n                  change the permissions, pass it empty, etc.\n                  If you can find an error that isn't handled, and isn't completely esoteric,\n                  no points for this exercise.\n                  The program must read from the file using an ifstream or equivalent,\n                  and write using an ofstream or equivalent.\n                  The implementation of the function should be done using functions from\n                  std::string, no by reading the string character by character.\n                  This is not C anymore!",
                        type: "boolean",
                        value: 0,
                        points: 6
                    }]
                }, {
                    title: "Exercise 05: Harl 2.0",
                    description: "The goal of this exercise is to use pointers to class member functions. Also, this is the opportunity to discover the different log levels.",
                    criteria: [{
                        id: "15",
                        name: "Makefile and tests",
                        description: "There is a Makefile that compiles using the appropriate flags.\n                  There is at least a main to test the exercise.",
                        type: "boolean",
                        value: 0,
                        points: 6
                    }, {
                        id: "16",
                        name: "Our beloved Harl",
                        description: "There is a class Harl with at least the 5 functions required in the subject.\n                  The function complain() executes the other functions using a pointer to them.\n                  Ideally, the student should have implemented a way of matching the different\n                  strings corresponding to the log level to the pointers of the corresponding\n                  member function.\n                  If the implementation is different but the exercise works, you should mark\n                  it as valid. The only thing that is not allowed is using a ugly if/elseif/else.\n                  The student could have chosen to change the message Harl displays or to\n                  display the examples given in the subject, both are valid.",
                        type: "boolean",
                        value: 0,
                        points: 6
                    }]
                }, {
                    title: "Exercise 06: Harl filter",
                    description: "Now that you are experienced coders, you should use new instruction types, statements, loops, etc. The goal of this last exercise is to make you discover the switch statement.",
                    criteria: [{
                        id: "17",
                        name: "Makefile and tests",
                        description: "There is a Makefile that compiles using the appropriate flags.\n                  There is at least a main to test the exercise.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "18",
                        name: "Switching Harl Off",
                        description: 'The program harlFilter takes as argument any of the log levels ("DEBUG",\n                  "INFO", "WARNING" or "ERROR"). It should then display just the messages\n                  that are at the same level or above (DEBUG < INFO < WARNING < ERROR). This\n                  must be implemented using a switch statement with a default case.\n                  Once again, no if/elseif/else anymore please.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }]
                }],
                totalPoints: 100
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1340,
            id: "18",
            name: "CPP Module 02",
            description: "This module is designed to help you understand Ad-hoc polymorphism, overloads and orthodox canonical classes in CPP.",
            difficulty: "beginner",
            estimatedHours: 12,
            baseXP: 0,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/143910/en.subject.pdf",
            status: "completed",
            tags: ["Imperative programming", "Object-oriented programming", "Rigor"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/143910/en.subject.pdf"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Prerequisites",
                        description: 'The code must compile with c++ and the flags -Wall -Wextra -Werror\n                Don\'t forget this project has to follow the C++98 standard. Thus,\n                C++11 (and later) functions or containers are NOT expected.\n                \n                Any of these means you must not grade the exercise in question:\n                \n                * A function is implemented in a header file (except for template functions).\n                * A Makefile compiles without the required flags and/or another compiler than c++.\n                \n                Any of these means that you must flag the project with "Forbidden\n                Function":\n                \n                * Use of a "C" function (*alloc, *printf, free).\n                * Use of a function not allowed in the exercise guidelines.\n                * Use of "using namespace <ns_name>" or the "friend" keyword.\n                * Use of an external library, or features from versions other than C++98.',
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                },
                otherSections: [{
                    title: "Exercise 00: My First Class in Orthodox Canonical Form",
                    description: "This exercise introduces the notion of canonical class with a simple arithmetic example: the fixed-point numbers.",
                    criteria: [{
                        id: "2",
                        name: "Makefile",
                        description: "There is a Makefile that compiles using the appropriate flags.",
                        type: "boolean",
                        value: 0,
                        points: 6
                    }, {
                        id: "3",
                        name: "Accessors",
                        description: "The Fixed class (or whatever its name) must provide accessors to\n                  the raw value:\n                  \n                  - int getRawBits( void ) const;\n                  - void setRawBits( int const raw ); Are these member functions present and functional?",
                        type: "boolean",
                        value: 0,
                        points: 7
                    }, {
                        id: "4",
                        name: "Canonical",
                        description: "A canonical class must provide at least:\n\n                  - A default constructor\n                  - A destructor\n                  - A copy constructor\n                  - An copy assignment operator Are these elements present and functional?",
                        type: "boolean",
                        value: 0,
                        points: 7
                    }]
                }, {
                    title: "Exercise 01: Towards a more useful fixed-point number class",
                    description: "The previous exercise was a good start, but the class was still pretty useless since it was only able to represent the fixed-point value 0.0.",
                    criteria: [{
                        id: "5",
                        name: "Makefile",
                        description: "There is a Makefile that compiles using the appropriate flags.",
                        type: "boolean",
                        value: 0,
                        points: 4
                    }, {
                        id: "6",
                        name: "Floating-point constructor",
                        description: "Is it possible to construct an instance from a floating-point value?",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "7",
                        name: "<< operator",
                        description: "Is there a << operator overload and is it functional?",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "8",
                        name: "Fixed-point value to integer value",
                        description: 'A member function "int toInt( void ) const;" that converts the\n                  fixed-point value to an integer value must be present. Is it functional?',
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "9",
                        name: "Fixed-point value to floating point value",
                        description: 'A member function "float toFloat( void ) const;" that converts\n                  the fixed-point value to a float value must be present. Is it functional?',
                        type: "boolean",
                        value: 0,
                        points: 3
                    }, {
                        id: "10",
                        name: "Integer constructor",
                        description: "Is it possible to construct an instance from an integer value?",
                        type: "boolean",
                        value: 0,
                        points: 3
                    }]
                }, {
                    title: "Exercise 02: Now we are talking",
                    description: "This exercise adds comparison and arithmetic features to the class.",
                    criteria: [{
                        id: "11",
                        name: "Makefile",
                        description: "There is a Makefile that compiles using the appropriate flags.",
                        type: "boolean",
                        value: 0,
                        points: 4
                    }, {
                        id: "12",
                        name: "Comparison operators",
                        description: "Are the 6 comparison operators (>, <, >=, <=, == and !=) implemented and working properly?",
                        type: "boolean",
                        value: 0,
                        points: 4
                    }, {
                        id: "13",
                        name: "Arithmetic operators",
                        description: "Are the 4 arithmetic operators (+, -, * and /) implemented and working properly?",
                        type: "boolean",
                        value: 0,
                        points: 4
                    }, {
                        id: "14",
                        name: "Other operators",
                        description: "Are the pre-increment, post-increment, pre-decrement and post-decrement\n                  operators implemented and working properly?",
                        type: "boolean",
                        value: 0,
                        points: 4
                    }, {
                        id: "15",
                        name: "Static member functions overloads",
                        description: "Last but not least, test the the min() and max() static member functions\n                  are implemented and working properly.",
                        type: "boolean",
                        value: 0,
                        points: 4
                    }]
                }, {
                    title: "Exercise 03: BSP",
                    description: "This exercise should have make you realize how easy it is to implement complex algorithms once the basics work as intended.",
                    criteria: [{
                        id: "16",
                        name: "Makefile",
                        description: "There is a Makefile that compiles using the appropriate flags.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "17",
                        name: "Class Point",
                        description: "There is a class Point which has two attributes (x and y) of type Fixed\n                  const. It also has a constructor that takes two floats and initialize x\n                  and y with those values.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "18",
                        name: "Function bsp",
                        description: 'There is a function bsp() which prototype is\n                  "bool bsp( Point const a, Point const b, Point const c, Point const point)".\n                  The function returns True if the point is inside the triangle described by\n                  the vertices a, b, and c.\n                  It returns False otherwise.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "19",
                        name: "Main and tests",
                        description: "There is at least a main to test that the function bsp() works as required.\n                  Run several test to make sure that the return value is correct.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }]
                }],
                totalPoints: 100
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1341,
            id: "19",
            name: "CPP Module 03",
            description: "This module is designed to help you understand Inheritance in CPP.",
            difficulty: "beginner",
            estimatedHours: 12,
            baseXP: 0,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/141059/en.subject.pdf",
            status: "completed",
            tags: ["Imperative programming", "Object-oriented programming", "Rigor"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/141059/en.subject.pdf"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Prerequisites",
                        description: 'The code must compile with c++ and the flags -Wall -Wextra -Werror\n                Don\'t forget this project has to follow the C++98 standard. Thus,\n                C++11 (and later) functions or containers are NOT expected.\n                \n                Any of these means you must not grade the exercise in question:\n                \n                * A function is implemented in a header file (except for template functions).\n                * A Makefile compiles without the required flags and/or another compiler than c++.\n                \n                Any of these means that you must flag the project with "Forbidden\n                Function":\n                \n                * Use of a "C" function (*alloc, *printf, free).\n                * Use of a function not allowed in the exercise guidelines.\n                * Use of "using namespace <ns_name>" or the "friend" keyword.\n                * Use of an external library, or features from versions other than C++98.',
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                },
                otherSections: [{
                    title: "Exercise 00: Aaaaand... OPEN!",
                    description: "As usual, there has to be enough tests to prove the program works as required. If there isn't, do not grade this exercise.",
                    criteria: [{
                        id: "2",
                        name: "Class and attributes",
                        description: "There is a ClapTrap class.\n                  It has all the following private attributes:\n                  \n                  - name\n                  - hit points\n                  - energy points\n                  - attack damage The attributes are initialized to the required values.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "3",
                        name: "Member functions",
                        description: "The class has following member functions and they work as specified:\n\n                  - attack()\n                  - takeDamage()\n                  - beRepaired()",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                }, {
                    title: "Exercise 01: Serena, my love!",
                    description: "As usual, there has to be enough tests to prove the program works as required. If there isn't, do not grade this exercise.",
                    criteria: [{
                        id: "4",
                        name: "Class and attributes",
                        description: "There is a ScavTrap class.\n                  The ScavTrap publicly inherits from the ClapTrap class.\n                  It does not re-declare any attributes.\n                  The ClapTrap attributes are now protected instead of private.\n                  The attributes are initialized to the required values.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "5",
                        name: "Member functions",
                        description: "The class has following member functions and they work as specified:\n\n                  - attack()\n                  - takeDamage() (inherited)\n                  - beRepaired() (inherited) The outputs of the constructor, destructor, and the attack() function must be different from the ClapTrap's.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "6",
                        name: "Construction and destruction",
                        description: "There must be a constructor and a destructor for the ScavTrap displaying\n                  specific messages. They must be implemented so that they are called in the\n                  correct order when used. This means if you create a ScavTrap, it must first\n                  display the ClapTrap's message then the ScavTrap's. If you delete a ScavTrap,\n                  it must display the ScavTrap's message first, then the ClapTrap's.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "7",
                        name: "Special feature",
                        description: "ScavTrap has a guardGate() function that displays a message on the\n                  standard output. It has also an attack() function that displays a short\n                  message on the standard output, which must be different from the original\n                  ClapTrap message.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }]
                }, {
                    title: "Exercise 02: Repetitive work",
                    description: "As usual, there has to be enough tests to prove the program works as required. If there isn't, do not grade this exercise.",
                    criteria: [{
                        id: "8",
                        name: "Class and attributes",
                        description: "There is a FragTrap class that publicly inherits from ClapTrap.\n                  Attributes must not be re-declared without reasons.",
                        type: "boolean",
                        value: 0,
                        points: 7
                    }, {
                        id: "9",
                        name: "Construction and destruction",
                        description: "There must be a constructor and a destructor for the FragTrap displaying\n                  specific messages. They must be implemented so that they are called in the\n                  correct order when used. This means if you create a FragTrap, it must first\n                  display the ClapTrap's message then the FragTrap's. If you delete a FragTrap,\n                  it must display the FragTrap's message first, then the ClapTrap's.",
                        type: "boolean",
                        value: 0,
                        points: 7
                    }, {
                        id: "10",
                        name: "Special feature",
                        description: "There is a highFivesGuys() function that displays a message on the\n                  standard output.",
                        type: "boolean",
                        value: 0,
                        points: 6
                    }]
                }, {
                    title: "Exercise 03: Now it is weird!",
                    description: "As usual, there has to be enough tests to prove the program works as required. If there isn't, do not grade this exercise.",
                    criteria: [{
                        id: "11",
                        name: "Ultimate C++ weird feature",
                        description: "There is a DiamondTrap class.\n                  It inherits from both the FragTrap and the ScavTrap.\n                  The attributes are set to the appropriate values.\n                  It uses virtual inheritance to avoid the pitfalls of diamond inheritance.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "12",
                        name: "Choose wisely...",
                        description: "The DiamondTrap uses the attack() method of the Scavtrap.\n                  It has the special functions of both its parents.\n                  The DiamondTrap has a private std::string name member.\n                  The function whoAmI() can display both name and clapTrap::name.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                }],
                totalPoints: 100
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1342,
            id: "20",
            name: "CPP Module 04",
            description: "This module is designed to help you understand Inheritance in CPP.",
            difficulty: "beginner",
            estimatedHours: 12,
            baseXP: 9660,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/141060/en.subject.pdf",
            status: "completed",
            tags: ["Imperative programming", "Object-oriented programming", "Rigor"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/141060/en.subject.pdf"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Prerequisites",
                        description: 'The code must compile with c++ and the flags -Wall -Wextra -Werror\n                Don\'t forget this project has to follow the C++98 standard. Thus,\n                C++11 (and later) functions or containers are NOT expected.\n                \n                Any of these means you must not grade the exercise in question:\n                \n                * A function is implemented in a header file (except for template functions).\n                * A Makefile compiles without the required flags and/or another compiler than c++.\n                \n                Any of these means that you must flag the project with "Forbidden\n                Function":\n                \n                * Use of a "C" function (*alloc, *printf, free).\n                * Use of a function not allowed in the exercise guidelines.\n                * Use of "using namespace <ns_name>" or the "friend" keyword.\n                * Use of an external library, or features from versions other than C++98.',
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                },
                otherSections: [{
                    title: "Exercise 00: Polymorphism",
                    description: "As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.",
                    criteria: [{
                        id: "2",
                        name: "First check",
                        description: "There is an Animal class that has one attribute:\n                  One string called type.\n                  You must be able to instantiate and use this class.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "3",
                        name: "Inheritance",
                        description: "They are at least two classes that inherit from Animal: Cat and Dog.\n                  The constructor and destructor outputs must be clear.\n                  Ask the student about constructor and destructor orders.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "4",
                        name: "Easy derived class",
                        description: 'The attribute type is set to the appropriate value at creation for\n                  every animal. Cat must have "Cat" and Dog must have "Dog".',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "5",
                        name: "Animal",
                        description: "Using makeSound() function always called the appropriate makeSound()\n                  function. makeSound() should be virtual! Verify it in the code.\n                  virtual void makeSound() const;\n                  The return value is not important but virtual keyword is mandatory.\n                  \n                  There should be an example with a WrongAnimal and WrongCat that don't\n                  use the virtual keyword (see subject).\n                  The WrongCat must output the WrongCat makeSound() only when used as a\n                  wrongCat.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }]
                }, {
                    title: "Exercise 01: I do not want to set the world on fire",
                    description: "As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.",
                    criteria: [{
                        id: "6",
                        name: "Concrete Animal",
                        description: "There is a new class called Brain.\n                  Cat and Dog have the required private Brain attribute.\n                  The Brain attribute should not be inside the Animal class.\n                  The Brain class has specific outputs upon creation and deletion.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "7",
                        name: "Concrete Brain",
                        description: "The copy a Cat or a Dog should be a deep copy.\n                  Test something like:\n                  Dog basic;\n                  {\n                  Dog tmp = basic;\n                  }\n                  If the copy is shallow, tmp and basic will use the same Brain and\n                  the Brain will get deleted with tmp at the end of the scope.\n                  The copy constructor should do a deep copy too.\n                  That's why a clean implementation in orthodox canonical form will\n                  save you from hours of pain.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "8",
                        name: "Destruction chaining",
                        description: "The destructors in Animal must be virtual.\n                  Ask an explanation of what will happen without the virtual keyword over Animal destructor.\n                  Test it.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "9",
                        name: "Assignment and copy",
                        description: "The copy and assignment behaviors of the Cat and Dog are like the\n                  subject requires.\n                  Deep copy means you need to create a new Brain for the Cat or Dog.\n                  Check that the canonical form is really implemented (i.e. no empty\n                  copy assignment operators and so forth). Nothing should be public for no\n                  reason. Moreover, this code is very simple so it needs to be clean!",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }]
                }, {
                    title: "Exercise 02: Abstract class",
                    description: "As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.",
                    criteria: [{
                        id: "10",
                        name: "Abstract class",
                        description: 'There is an Animal class exactly like the one in the subject.\n                  The Animal::makeSound is a pure virtual function.\n                  It should look like : virtual void makeSound() const = 0;\n                  The "= 0" part is mandatory.\n                  You should not be able to instantiate an Animal.\n                  Animal test; //should give you a compile error about the class being abstract',
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "11",
                        name: "Concrete Animal",
                        description: "Class Cat and Dog are still present and work exactly like in ex01.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                }, {
                    title: "Exercise 03: Interface and recap",
                    description: "As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.",
                    criteria: [{
                        id: "12",
                        name: "Interfaces",
                        description: "There are ICharacter and IMateriaSource interfaces that are exactly like\n                  required in the subject.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "13",
                        name: "MateriaSource",
                        description: "The MateriaSource class is present and implements IMateriaSource. The\n                  member functions work as intended.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "14",
                        name: "Concrete Materia",
                        description: "There are concrete Ice and Cure classes that inherit from AMateria. Their\n                  clone() method is correctly implemented. Their outputs are correct.\n                  The AMateria class is still abstract (clone() is a pure function).\n                  virtual ~AMateria() is present.\n                  AMateria contains a protected string attribute to store the type.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "15",
                        name: "Character",
                        description: "The Character class is present and implements ICharacter. It has\n                  an inventory of 4 Materias maximum.\n                  The member functions are implemented as the subject requires.\n                  The copy and assignment of a Character are implemented as required\n                  (deep copy).",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }]
                }],
                totalPoints: 100
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1343,
            id: "21",
            name: "CPP Module 05",
            description: "This module is designed to help you understand Try/Catch and Exceptions in CPP.",
            difficulty: "beginner",
            estimatedHours: 25,
            baseXP: 0,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/143928/en.subject.pdf",
            status: "completed",
            tags: ["Imperative programming", "Object-oriented programming", "Rigor"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/143928/en.subject.pdf"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Prerequisites",
                        description: 'The code must compile with c++ and the flags -Wall -Wextra -Werror\n                Don\'t forget this project has to follow the C++98 standard. Thus,\n                C++11 (and later) functions or containers are NOT expected.\n                \n                Any of these means you must not grade the exercise in question:\n                \n                * A function is implemented in a header file (except for template functions).\n                * A Makefile compiles without the required flags and/or another compiler than c++.\n                \n                Any of these means that you must flag the project with "Forbidden\n                Function":\n                \n                * Use of a "C" function (*alloc, *printf, free).\n                * Use of a function not allowed in the exercise guidelines.\n                * Use of "using namespace <ns_name>" or the "friend" keyword.\n                * Use of an external library, or features from versions other than C++98.',
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                },
                otherSections: [{
                    title: "Ex00: Mommy, when I grow up, I want to be a bureaucrat!",
                    description: "As usual, there has to be the main function that contains enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.",
                    criteria: [{
                        id: "2",
                        name: "First check",
                        description: "There is a Makefile that compiles using the appropriate flags.\n                  There is a Bureaucrat class. It has a constant name\n                  It has a grade that ranges from 1 (highest) to 150 (lowest).\n                  Exceptions are thrown when trying to create a Bureaucrat with a grade\n                  that is too high or too low.\n                  There are accessors for the attributes\n                  There are functions to increment / decrement the grade,\n                  They throw exceptions when it's appropriate. Remember that incrementing a\n                  grade 3 will give you a grade 2 (1 is the highest).\n                  The exceptions that are used inherit from std::exception, or from\n                  something derived from std::exception (i.e. they are catchable as\n                  std::exception & e).\n                  There is a << operator to ostream overload that outputs the info of the\n                  Bureaucrat.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                }, {
                    title: "Ex01: Form up, maggots!",
                    description: "As usual, there has to be the main function that contains enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.",
                    criteria: [{
                        id: "3",
                        name: "Form",
                        description: "There is a Makefile that compiles using the appropriate flags. There is a Form class. It has a name, a bool that indicates whether is it signed (at the beginning it's not), a grade required to sign it, and a grade required to execute it. The names and grades are constant. All these attributes are private and not protected. The grades of the forms follow the same constraints as the Bureaucrat's (exceptions, 1 = highest 150 = lowest, and so forth). There are accessors for the attributes and a << operator to ostream overload that displays the complete state of the Form. There is a Form::beSigned() member function that works as described by the subject. There is a Bureaucrat::signForm() function that works as described by the subject.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                }, {
                    title: "Ex02: No, you need form 28B, not 28C...",
                    description: "As usual, there has to be the main function that contains enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.",
                    criteria: [{
                        id: "4",
                        name: "Forms that actually do something",
                        description: "There is a Makefile that compiles using the appropriate flags\n                  There are concrete forms that are conform to the specifications of the\n                  subject (required grades, names and actions).\n                  They take only one parameter in their constructor, which is their target.\n                  There is a AForm::execute(Bureaucrat const & executor) method that works\n                  as specified by the subject.\n                  Either this method is pure and the grade checks are implemented in each\n                  subclass, or this method performs the checks, then calls another method\n                  in derived class that only executes the action.\n                  Both of these techniques are valid.\n                  There is a Bureaucrat::executeForm(AForm const & form) that works as\n                  specified by the subject.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                }, {
                    title: "Ex03: At least this beats coffee-making",
                    description: "As usual, there has to be the main function that contains enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.",
                    criteria: [{
                        id: "5",
                        name: "Intern",
                        description: "There is a Makefile that compiles using the appropriate flags.\n                  There is an Intern class\n                  It has a makeForm() function that works as specified by the subject.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "6",
                        name: "Good dispatching",
                        description: "The makeForm() function should use some kind of array of pointers to member\n                  functions to handle the creation of Forms.\n                  If it's using an unclean method, like if/elseif/elseif/else branchings, or\n                  some other ugly stuff like this, please count this as wrong.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                }],
                totalPoints: 100
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1344,
            id: "22",
            name: "CPP Module 06",
            description: "This module is designed to help you understand the different casts in CPP.",
            difficulty: "beginner",
            estimatedHours: 25,
            baseXP: 0,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/141063/en.subject.pdf",
            status: "completed",
            tags: ["Imperative programming", "Object-oriented programming", "Rigor"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/141063/en.subject.pdf"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Prerequisites",
                        description: 'The code must compile with c++ and the flags -Wall -Wextra -Werror\n                Don\'t forget this project has to follow the C++98 standard. Thus,\n                C++11 (and later) functions or containers are NOT expected.\n                \n                Any of these means you must not grade the exercise in question:\n                \n                * A function is implemented in a header file (except for template functions).\n                * A Makefile compiles without the required flags and/or another compiler than c++.\n                \n                Any of these means that you must flag the project with "Forbidden\n                Function":\n                \n                * Use of a "C" function (*alloc, *printf, free).\n                * Use of a function not allowed in the exercise guidelines.\n                * Use of "using namespace <ns_name>" or the "friend" keyword.\n                * Use of an external library, or features from versions other than C++98.',
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                },
                otherSections: [{
                    title: "Exercise 00: Conversion of scalar types",
                    description: "This exercise is about using the static_cast.",
                    criteria: [{
                        id: "2",
                        name: "Scalar conversion",
                        description: "Did the student create a class with a private constructor, and static\n                  methods ?\n                  Did the student use the static_cast to convert values?\n                  Accept the use of implicit casts for promotion casts only.\n                  Does the program work as required?\n                  \n                  Anyway, please don't be too uncompromising towards the exercise's outputs\n                  if the spirit of the exercise is respected.\n                  Even if this exercise is wrong, continue the evaluation process.",
                        type: "boolean",
                        value: 0,
                        points: 30
                    }]
                }, {
                    title: "Exercise 01: Serialization",
                    description: "This exercise is about using the reinterpret_cast.",
                    criteria: [{
                        id: "3",
                        name: "Retyping of raw data",
                        description: "Does the program work as required?\n                  Did the student create a class with a private constructor, and static\n                  methods ?\n                  The reinterpret_cast<> should be used twice:\n                  \n                  - First from data* to uintptr_t.\n                  - Then, from uintptr_t to data*.\n                  \n                  And the resulting data struct should be usable.",
                        type: "boolean",
                        value: 0,
                        points: 30
                    }]
                }, {
                    title: "Exercise 02: Identify real type",
                    description: "This exercise is about using the dynamic_cast.",
                    criteria: [{
                        id: "4",
                        name: "Real type identification",
                        description: "Does the program work as required?\n                  Check the code. Did the student use the dynamic_cast to identify the real\n                  type?\n                  void identify(Base* p) should check if the cast return is NULL.\n                  void identify(Base& p) should use a try and catch block to check if the cast failed.\n                  \n                  (In case you're wondering, the header <typeinfo> must not appear\n                  anywhere.)",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                }],
                totalPoints: 100
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1345,
            id: "23",
            name: "CPP Module 07",
            description: "This module is designed to help you understand Templates in CPP.",
            difficulty: "beginner",
            estimatedHours: 25,
            baseXP: 0,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/141064/en.subject.pdf",
            status: "completed",
            tags: ["Imperative programming", "Object-oriented programming", "Rigor"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/141064/en.subject.pdf"
                }, {
                    name: "main.cpp",
                    url: "https://cdn.intra.42.fr/document/document/27702/main.cpp"
                }, {
                    name: "ex00.cpp",
                    url: "https://abdelmathin.github.io/42attachments/attachments/cpp-module-07/ex00.cpp"
                }, {
                    name: "ex01.cpp",
                    url: "https://abdelmathin.github.io/42attachments/attachments/cpp-module-07/ex01.cpp"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Prerequisites",
                        description: 'The code must compile with c++ and the flags -Wall -Wextra -Werror\n                Don\'t forget this project has to follow the C++98 standard. Thus,\n                C++11 (and later) functions or containers are NOT expected.\n                \n                Any of these means you must not grade the exercise in question:\n                \n                * A function is implemented in a header file (except for template functions).\n                * A Makefile compiles without the required flags and/or another compiler than c++.\n                \n                Any of these means that you must flag the project with "Forbidden\n                Function":\n                \n                * Use of a "C" function (*alloc, *printf, free).\n                * Use of a function not allowed in the exercise guidelines.\n                * Use of "using namespace <ns_name>" or the "friend" keyword.\n                * Use of an external library, or features from versions other than C++98.',
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                },
                otherSections: [{
                    title: "Exercise 00: Start with a few functions",
                    description: "This exercise is about writing 3 simple function templates: swap(), min() and max().",
                    criteria: [{
                        id: "2",
                        name: "Simple types",
                        description: "Refer to the subject for the expected output with simple types, such\n                  as int.",
                        type: "boolean",
                        value: 0,
                        points: 15
                    }, {
                        id: "3",
                        name: "Complex types",
                        description: "Do the functions also work with complex types? (check with the ex00.cpp file in attachment)",
                        type: "boolean",
                        value: 0,
                        points: 15
                    }]
                }, {
                    title: "Exercise 01: Iter",
                    description: "This exercise is about writing a generic function to iterate through arrays.",
                    criteria: [{
                        id: "4",
                        name: "Does it work?",
                        description: "Test the code ex01.cpp (in attachments) with the iter of the evaluated student.\n                  If everything went well, it should display:\n                  \n                  0\n                  1\n                  2\n                  3\n                  4\n                  42\n                  42\n                  42\n                  42\n                  42",
                        type: "boolean",
                        value: 0,
                        points: 30
                    }]
                }, {
                    title: "Exercise 02: Array",
                    description: "This exercise is about writing a class template that behaves like an array. If the inner allocation of the actual array does not come from a use of new[], don't grade this exercise. Ask the evaluated student to prove the class template works with arrays of both simple and complex types before grading the exercise.",
                    criteria: [{
                        id: "5",
                        name: "Constructors",
                        description: "Is it possible to create an empty array and an array of a specific size?",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "6",
                        name: "Access",
                        description: "Elements must be accessible for reading and writing through the operator[]\n                  (or reading only if the instance is const). Access to an element which is\n                  out of range must throw an std::exception.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                }],
                totalPoints: 100
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1346,
            id: "24",
            name: "CPP Module 08",
            description: "This module is designed to help you understand templated containers, iterators and algorithms in CPP.",
            difficulty: "beginner",
            estimatedHours: 25,
            baseXP: 0,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/141065/en.subject.pdf",
            status: "completed",
            tags: ["Imperative programming", "Object-oriented programming", "Rigor"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/141065/en.subject.pdf"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Prerequisites",
                        description: 'The code must compile with c++ and the flags -Wall -Wextra -Werror\n                Don\'t forget this project has to follow the C++98 standard. Thus,\n                C++11 (and later) are NOT expected.\n                The purpose of this module is to use the STL. Then, using the\n                containers and the algorithms is authorized.\n                \n                Any of these means you must not grade the exercise in question:\n                \n                *  A function is implemented in a header file (except for template functions).\n                *  A Makefile compiles without the required flags and/or another compiler than c++.\n                \n                Any of these means that you must flag the project with "Forbidden\n                Function":\n                \n                *  Use of a "C" function (*alloc, *printf, free).\n                *  Use of a function not allowed in the exercise guidelines.\n                *  Use of "using namespace <ns_name>" or the "friend" keyword.\n                *  Use of an external library, or features from versions other than C++98.',
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                },
                otherSections: [{
                    title: "Exercise 00: Easy find",
                    description: "As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.",
                    criteria: [{
                        id: "2",
                        name: "Template function",
                        description: "There is a templated function easyfind(T, int) that does what the\n                  subject requires.\n                  It HAS to use STL algorithms.\n                  If it does not use them count it as wrong. (For example: a manual\n                  search using iterators)",
                        type: "boolean",
                        value: 0,
                        points: 30
                    }]
                }, {
                    title: "Exercise 01: Span",
                    description: "As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.",
                    criteria: [{
                        id: "3",
                        name: "Class and member functions",
                        description: "There is a class that complies with the requirements of the subject.\n                  Its member functions use STL algorithms to find their result as much as\n                  possible. Finding the shortest span can't be done only by subtracting\n                  the two lowest numbers (take a closer look at the subject example).",
                        type: "boolean",
                        value: 0,
                        points: 15
                    }, {
                        id: "4",
                        name: "Improved addNumber function",
                        description: "There's a way to add numbers that's more practical than calling the\n                  addNumber() function repeatedly.",
                        type: "boolean",
                        value: 0,
                        points: 15
                    }]
                }, {
                    title: "Exercise 02: Mutated abomination",
                    description: "As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.",
                    criteria: [{
                        id: "5",
                        name: "MutantStack class",
                        description: "There is a MutantStack class that offers all of std::stack methods.\n                  It must contain an iterator.\n                  Also, it is possible to do at least the operations shown in the subject's examples using iterators.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "6",
                        name: "Better tests",
                        description: "There is a at least a main() function that has more tests than the ones\n                  from the subject.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                }],
                totalPoints: 100
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 2309,
            id: "25",
            name: "CPP Module 09",
            description: "This module is designed to help you understand the containers in CPP.",
            difficulty: "beginner",
            estimatedHours: 40,
            baseXP: 10042,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/139792/en.subject.pdf",
            status: "completed",
            tags: ["Imperative programming", "Object-oriented programming", "Rigor"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/139792/en.subject.pdf"
                }, {
                    name: "cpp_09.tgz",
                    url: "https://cdn.intra.42.fr/document/document/27391/cpp_09.tgz"
                }, {
                    name: "input.csv",
                    url: "https://abdelmathin.github.io/42attachments/attachments/cpp-module-09/input.csv"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Prerequisites",
                        description: 'The code must compile with c++ and the flags -Wall -Wextra -Werror\n                Don\'t forget this project has to follow the C++98 standard. Thus,\n                C++11 (and later) are NOT expected.\n                The purpose of this module is to use the STL. Then, using the\n                containers and the algorithms is authorized.\n                \n                Any of these means you must not grade the exercise in question:\n                \n                *  A function is implemented in a header file (except for template functions).\n                *  A Makefile compiles without the required flags and/or another compiler than c++.\n                \n                Any of these means that you must flag the project with "Forbidden\n                Function":\n                \n                *  Use of a "C" function (*alloc, *printf, free).\n                *  Use of a function not allowed in the exercise guidelines.\n                *  Use of "using namespace <ns_name>" or the "friend" keyword.\n                *  Use of an external library, or features from versions other than C++98.',
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                },
                otherSections: [{
                    title: "Exercise 00: Bitcoin Exchange",
                    description: "For this first exercise, you have to find a makefile with the usual compilation rules and the files requested in the subject.",
                    criteria: [{
                        id: "2",
                        name: "Code review",
                        description: "Check that a makefile is present with the usual compilation rules.\n\n                  Check in the code that the program uses at least one container.\n                  \n                  The person being evaluated must explain why they chose to use this\n                  container and not another?\n                  \n                  If not, the evaluation stops here.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "3",
                        name: "Error handle",
                        description: "You must be able to use an empty file or a file with errors\n                  (a basic example exists in the subject). The program must not stop\n                  its execution before having performed the operations on the whole\n                  file passed as argument.\n                  \n                  You can use a wrong date.\n                  \n                  You can enter a value greater than 1000 or less than 0.\n                  \n                  If there is any problem during the execution then the evaluation stops here.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "4",
                        name: "Main usage",
                        description: 'You must now use the "input.csv" file located at the top of this page.\n\n                  You can modify this file with the values you want.\n                  \n                  You have to run the program with the input.csv file as parameter.\n                  \n                  Please compare some dates manually with the specified value.\n                  \n                  If the date does not exist in the database, the program will have to use the\n                  nearest lower date.',
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                }, {
                    title: "Exercise 01: Reverse Polish Notation",
                    description: "For this second exercise, you have to find a makefile with the usual compilation rules and the files requested in the subject.",
                    criteria: [{
                        id: "5",
                        name: "Code review",
                        description: "Check that a makefile is present with the usual compilation rules.\n\n                  Check in the code that the program uses at least one container.\n                  \n                  The person being evaluated must explain why they chose to\n                  use this container and not another?\n                  \n                  If not, the evaluation stops here.\n                  \n                  If the container chosen here is present in the first exercise\n                  then the evaluation stops here.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "6",
                        name: "Main usage",
                        description: "Check that the program runs correctly using different formulas of your choice.\n\n                  The program is not required to handle expressions with parenthesis or decimals\n                  number.\n                  \n                  If there is any problem during the execution then the evaluation stops here.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "7",
                        name: "Usage advanced",
                        description: "Check that the program runs correctly using different formulas of your choice.\n\n                  Here is some tests:\n                  \n                  8 9 * 9 - 9 - 9 - 4 - 1 +\n                  > Result: 42\n                  \n                  9 8 * 4 * 4 / 2 + 9 - 8 - 8 - 1 - 6 -\n                  > Result: 42\n                  \n                  1 2 * 2 / 2 + 5 * 6 - 1 3 * - 4 5 * * 8 / \n                  > Result: 15\n                  \n                  You can use the examples in the topic if you don't know which formula to use.\n                  \n                  If there is any problem during the execution then the evaluation stops here.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                }, {
                    title: "Exercise 02: PmergeMe",
                    description: "As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.",
                    criteria: [{
                        id: "8",
                        name: "Code review",
                        description: "Check that a makefile is included with the usual compilation rules rules.\n\n                  Check in the code that the program uses at least two containers.\n                  \n                  If not, the evaluation stops here.\n                  \n                  The person being evaluated must explain why they chose to use these containers\n                  and not another?\n                  \n                  Check in the code that the merge-insert sort algorithm is present and is used for each container. Thalgorithm must be used.\n                  Therefore, the student must be capable of explaining the following concepts:\n\n                       - The key aspects of merge insertion, speciﬁcally the role of pairs.\n                       - The Jacobsthal sequence and its relevance.\n                       - The process of binary search.\n                  \n                  A brief explanation is expected. In case of doubt, the evaluation stops here.\n                  \n                  If one of the containers chosen here is included in one of the previous\n                  exercises then the evaluation stops here.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "9",
                        name: "Main usage",
                        description: "You can now manually check that the program works correctly by using between\n                  5 and 10 different positive integers of your choice as program arguments.\n                  \n                  If this first test works and gives a sorted sequence of numbers you can continue.\n                  If not, the evaluation stops now.\n                  \n                  Now you have to check this operation by using the following command as an\n                  argument to the program:\n                  \n                  For linux:\n                  \n                  `shuf -i 1-1000 -n 3000 | tr \"\n\" \" \" `\n                  \n                  For OSX:\n                  \n                  `jot -r 3000 1 1000 | tr '\n' ' '`\n\n                  If the command works correctly, the person being evaluated should be able to\n                  explain the difference in time used for each container selected.\n                  \n                  If there are any problems during the execution and/or explanation then the\n                  evaluation stops here.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                }],
                totalPoints: 100
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1983,
            id: "26",
            name: "Inception",
            description: "This project aims to broaden your knowledge of system administration by using Docker. You will virtualize several Docker images, creating them in your new personal virtual machine.",
            difficulty: "intermediate",
            estimatedHours: 210,
            baseXP: 10042,
            teamSize: {
                min: 1,
                max: 1
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/147349/en.subject.pdf",
            status: "completed",
            tags: ["System administration", "Rigor", "Network & system administration"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/147349/en.subject.pdf"
                }],
                preliminaries: {
                    title: "Preliminaries",
                    description: 'If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.',
                    criteria: [{
                        id: "1",
                        name: "Preliminary tests",
                        description: "- Any credentials, API keys, environment variables must be set inside a .env file during the evaluation. In case any credentials, API keys are available in the git repository and outside of the .env file created during the evaluation, the evaluation stop and the mark is 0.\n                - Defense can only happen if the evaluated student or group is present. This way everybody learns by sharing knowledge with each other.\n                - If no work has been submitted (or wrong files, wrong directory, or wrong filenames), the grade is 0, and the evaluation process ends.\n                - For this project, you have to clone their Git repository on their station.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                },
                general: {
                    title: "General instructions",
                    criteria: [{
                        id: "2",
                        name: "General instructions",
                        description: "- For the entire evaluation process, if you don't know how to check a requirement, or verify anything, the evaluated student has to help you.\n                - Ensure that all the files required to configure the application are located inside a srcs folder. The srcs folder must be located at the root of the repository.\n                - Ensure that a Makefile is located at the root of the repository.\n                - Before starting the evaluation, run this command in the terminal: \"docker stop $(docker ps -qa); docker rm $(docker ps -qa); docker rmi -f $(docker images -qa); docker volume rm $(docker volume ls -q); docker network rm $(docker network ls -q) 2>/dev/null\"\n                - Read the docker-compose.yml file. There musn't be 'network: host' in it or 'links:'. Otherwise, the evaluation ends now.\n                - Read the docker-compose.yml file. There must be 'network(s)' in it. Otherwise, the evaluation ends now.\n                - Examine the Makefile and all the scripts in which Docker is used. There musn't be '--link' in any of them. Otherwise, the evaluation ends now.\n                - Examine the Dockerfiles. If you see 'tail -f' or any command run in background in any of them in the ENTRYPOINT section, the evaluation ends now. Same thing if 'bash' or 'sh' are used but not for running a script (e.g, 'nginx & bash' or 'bash').\n                - If the entrypoint is a script (e.g., ENTRYPOINT [\"sh\", \"my_entrypoint.sh\"], ENTRYPOINT [\"bash\", \"my_entrypoint.sh\"]), ensure it runs no program\n                - in background (e.g, 'nginx & bash').\n                - Examine all the scripts in the repository. Ensure none of them runs an infinite loop. The following are a few examples of prohibited commands: 'sleep infinity', 'tail -f /dev/null', 'tail -f /dev/random'\n                - Run the Makefile.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                },
                mandatory: {
                    title: "Mandatory part",
                    description: "This project consists in setting up a small infrastructure composed of different services using docker compose. Ensure that all the following points are correct.",
                    criteria: [{
                        id: "3",
                        name: "Project overview",
                        description: "- The evaluated person has to explain to you in simple terms:\n                -    * How Docker and docker compose work\n                -    * The difference between a Docker image used with docker compose and without docker compose\n                -    * The benefit of Docker compared to VMs\n                -    * The pertinence of the directory structure required for this project (an example is provided in the subject's PDF file).",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "4",
                        name: "Simple setup",
                        description: "- Ensure that NGINX can be accessed by port 443 only. Once done, open the page.\n                - Ensure that a SSL/TLS certificate is used.\n                - Ensure that the WordPress website is properly installed and configured (you shouldn't see the WordPress Installation page). To access it, open https://login.42.fr in your browser, where login is the login of the evaluated student. You shouldn't be able to access the site via\n                http://login.42.fr. If something doesn't work as expected, the evaluation process ends now.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "5",
                        name: "Docker Basics",
                        description: "- Start by checking the Dockerfiles. There must be one Dockerfile per service. Ensure that the Dockerfiles are not empty files. If it's not the case or if a Dockerfile is missing, the evaluation process ends now.\n                - Make sure the evaluated student has written their own Dockerfiles and built their own Docker images. Indeed, it is forbidden to use ready-made ones or to use services such as DockerHub.\n                - Ensure that every container is built from the penultimate stable version of Alpine/Debian. If a Dockerfile does not start with 'FROM alpine:X.X.X' or 'FROM debian:XXXXX', or any other local image, the evaluation process ends now.\n                - The Docker images must have the same name as their corresponding service. Otherwise, the evaluation process ends now.\n                - Ensure that the Makefile has set up all the services via docker compose. This means that the containers must have been built using docker compose and that no crash happened. Otherwise, the evaluation process ends.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "6",
                        name: "Docker Network",
                        description: "- Ensure that docker-network is used by checking the docker-compose.yml file. Then run the 'docker network ls' command to verify that a network is visible.\n                - The evaluated student has to give you a simple explanation of docker-network. If any of the above points is not correct, the evaluation process ends now.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "7",
                        name: "NGINX with SSL/TLS",
                        description: "- Ensure that there is a Dockerfile.\n                - Using the 'docker compose ps' command, ensure that the container was created (using the flag '-p' is authorized if necessary).\n                - Try to access the service via http (port 80) and verify that you cannot connect.\n                - Open https://login.42.fr/ in your browser, where login is the login of the evaluated student. The displayed page must be the configured WordPress website (you shouldn't see the WordPress Installation page).\n                - The use of a TLS v1.2/v1.3 certificate is mandatory and must be demonstrated. The SSL/TLS certificate doesn't have to be recognized. A self-signed certificate warning may appear. If any of the above points is not clearly explained and correct, the evaluation process ends now.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "8",
                        name: "WordPress with php-fpm and its volume",
                        description: "- Ensure that there is a Dockerfile.\n                - Ensure that there is no NGINX in the Dockerfile.\n                - Using the 'docker compose ps' command, ensure that the container was created (using the flag '-p' is authorized if necessary).\n                - Ensure that there is a Volume. To do so: Run the command 'docker volume ls' then 'docker volume inspect <volume name>'. Verify that the result in the standard output contains the path '/home/login/data/', where login is the login of the evaluated student.\n                - Ensure that you can add a comment using the available WordPress user.\n                - Sign in with the administrator account to access the Administration dashboard. The Admin username must not include 'admin' or 'Admin' (e.g., admin, administrator, Admin-login, admin-123, and so forth).\n                - From the Administration dashboard, edit a page. Verify on the website that the page has been updated. If any of the above points is not correct, the evaluation process ends now.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "9",
                        name: "MariaDB and its volume",
                        description: "- Ensure that there is a Dockerfile.\n                - Ensure that there is no NGINX in the Dockerfile.\n                - Using the 'docker compose ps' command, ensure that the container was created (using the flag '-p' is authorized if necessary).\n                - Ensure that there is a Volume. To do so: Run the command 'docker volume ls' then 'docker volume inspect <volume name>'. Verify that the result in the standard output contains the path '/home/login/data/', where login is the login of the evaluated student.\n                - The evaluated student must be able to explain you how to login into the database. Verify that the database is not empty. If any of the above points is not correct, the evaluation process ends now.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "10",
                        name: "Persistence!",
                        description: "- This part is pretty straightforward. You have to reboot the virtual machine. Once it has restarted, launch docker compose again. Then, verify that everything is functional, and that both WordPress and MariaDB are configured. The changes you made previously to the WordPress website should still be here. If any of the above points is not correct, the evaluation process ends now.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                },
                bonus: {
                    title: "Bonus",
                    description: "Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.",
                    criteria: [{
                        id: "11",
                        name: "Bonus",
                        description: "Add 1 point per bonus authorized in the subject.\n                Verify and test the proper functioning and implementation of each extra\n                service.\n                For the free choice service, the evaluated student has to give you a\n                simple explanation about how it works and why they think it is useful.",
                        type: "progress",
                        value: 0,
                        points: 25,
                        maxProgress: 5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1336,
            id: "27",
            name: "ft_irc",
            description: "Create your own IRC server in C++, fully compatible with an official client.",
            difficulty: "advanced",
            estimatedHours: 175,
            baseXP: 21630,
            teamSize: {
                min: 2,
                max: 3
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/147356/en.subject.pdf",
            status: "not_started",
            tags: ["Rigor", "Unix", "Network & system administration", "Object-oriented programming"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/147356/en.subject.pdf"
                }, {
                    name: "bircd.tar.gz",
                    url: "https://cdn.intra.42.fr/document/document/29697/bircd.tar.gz"
                }],
                mandatory: {
                    title: "Mandatory part",
                    criteria: [{
                        id: "1",
                        name: "Basic checks",
                        description: "- There is a Makefile, the project compiles correctly with the required options, is written in C++, and the executable is called as expected.\n                - Ask and check how many poll() (or equivalent) are present in the code. There must be only one.\n                - Verify that the poll() (or equivalent) is called every time before each accept, read/recv, write/send. After these calls, errno should not be used to trigger specific action (e.g. like reading again after errno == EAGAIN).\n                - Verify that each call to fcntl() is done as follows: fcntl(fd, F_SETFL, O_NONBLOCK); Any other use of fcntl() is forbidden.\n                - If any of these points is wrong, the evaluation ends now and the final mark is 0.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }, {
                        id: "2",
                        name: "Networking",
                        description: "Check the following requirements:\n\n                - The server starts, and listens on all network interfaces on the port given from the command line.\n                - Using the 'nc' tool, you can connect to the server, send commands, and the server answers you back.\n                - Ask the team what is their reference IRC client.\n                - Using this IRC client, you can connect to the server.\n                - The server can handle multiple connections at the same time. The server should not block. It should be able to answer all demands. Do some test with the IRC client and nc at the same time.\n                - Join a channel thanks to the appropriate command. Ensure that all messages from one client on that channel are sent to all other clients that joined the channel.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }, {
                        id: "3",
                        name: "Networking specials",
                        description: "Network communications can be disturbed by many strange situations.\n\n                - Just like in the subject, using nc, try to send partial commands. Check that the server answers correctly. With a partial command sent, ensure that other connections still run fine.\n                - Unexpectedly kill a client. Then check that the server is still operational for the other connections and for any new incoming client.\n                - Unexpectedly kill a nc with just half of a command sent. Check again that the server is not in an odd state or blocked.\n                - Stop a client (^-Z) connected on a channel. Then flood the channel using another client. The server should not hang. When the client is live again, all stored commands should be processed normally. Also, check for memory leaks during this operation.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }, {
                        id: "4",
                        name: "Client Commands basic",
                        description: "- With both nc and the reference IRC client, check that you can authenticate, set a nickname, a username, join a channel. This should be fine (you should have already done this previously).\n                - Verify that private messages (PRIVMSG) are fully functional with different parameters.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }, {
                        id: "5",
                        name: "Client Commands channel operator",
                        description: "- With both nc and the reference IRC client, check that a regular user does not have privileges to do channel operator actions. Then test with an operator. All the channel operation commands should be tested (remove one point for each feature that is not working).",
                        type: "progress",
                        value: 0,
                        points: 20,
                        maxProgress: 5
                    }]
                },
                bonus: {
                    title: "Bonus",
                    description: "Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.",
                    criteria: [{
                        id: "6",
                        name: "File transfer",
                        description: "File transfer works with the reference IRC client.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "7",
                        name: "A small bot",
                        description: "There's an IRC bot.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1332,
            id: "28",
            name: "webserv",
            description: "This project is here to make you write your own HTTP server. You will be able to test it with a real browser. HTTP is one of the most used protocol on internet. Knowing its arcane will be useful, even if you won't be working on a website.",
            difficulty: "advanced",
            estimatedHours: 175,
            baseXP: 21630,
            teamSize: {
                min: 2,
                max: 3
            },
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/139962/en.subject.pdf",
            status: "not_started",
            tags: ["Rigor", "Unix", "Network & system administration", "Object-oriented programming"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/139962/en.subject.pdf"
                }, {
                    name: "tester",
                    url: "https://cdn.intra.42.fr/document/document/27434/tester"
                }, {
                    name: "ubuntu_cgi_tester",
                    url: "https://cdn.intra.42.fr/document/document/27435/ubuntu_cgi_tester"
                }, {
                    name: "cgi_tester",
                    url: "https://cdn.intra.42.fr/document/document/27436/cgi_tester"
                }, {
                    name: "ubuntu_tester",
                    url: "https://cdn.intra.42.fr/document/document/27437/ubuntu_tester"
                }],
                mandatory: {
                    title: "Mandatory part",
                    criteria: [{
                        id: "1",
                        name: "Check the code and ask questions",
                        description: "- Launch the installation of siege with homebrew.\n                - Ask explanations about the basics of an HTTP server.\n                - Ask what function the group used for I/O Multiplexing.\n                - Ask for an explanation of how does select() (or equivalent) work.\n                - Ask if they use only one select() (or equivalent) and how they've managed the server to accept and the client to read/write.\n                - The select() (or equivalent) should be in the main loop and should check file descriptors for read and write AT THE SAME TIME. If not, the grade is 0 and the evaluation process ends now.\n                - There should be only one read or one write per client per select() (or equivalent). Ask the group to show you the code from the select() (or equivalent) to the read and write of a client.\n                - Search for all read/recv/write/send on a socket and check that, if an error is returned, the client is removed.\n                - Search for all read/recv/write/send and check if the returned value is correctly checked (checking only -1 or 0 values is not enough, both should be checked).\n                - If errno is checked after read/recv/write/send, the grade is 0 and the evaluation process ends now.\n                - Writing or reading ANY file descriptor without going through the select() (or equivalent) is strictly FORBIDDEN.\n                - The project must compile without any re-link issue. If not, use the 'Invalid compilation' flag.\n                - If any point is unclear or is not correct, the evaluation stops.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }, {
                        id: "2",
                        name: "Configuration",
                        description: 'In the configuration file, check whether you can do the following and\n                test the result:\n                \n                - Search for the HTTP response status codes list on the internet. During this evaluation, if any status codes is wrong, don\'t give any related points.\n                - Setup multiple servers with different ports.\n                - Setup multiple servers with different hostnames (use something like: curl --resolve example.com:80:127.0.0.1 http://example.com/).\n                - Setup default error page (try to change the error 404).\n                - Limit the client body (use: curl -X POST -H "Content-Type: plain/text" --data "BODY IS HERE write something shorter or longer than body limit").\n                - Setup routes in a server to different directories.\n                - Setup a default file to search for if you ask for a directory.\n                - Setup a list of methods accepted for a certain route (e.g., try to delete something with and without permission).',
                        type: "boolean",
                        value: 0,
                        points: 20
                    }, {
                        id: "3",
                        name: "Basic checks",
                        description: "Using telnet, curl, prepared files, demonstrate that the following\n                features work properly:\n                \n                - GET, POST and DELETE requests should work.\n                - UNKNOWN requests should not result in a crash.\n                - For every test you should receive the appropriate status code.\n                - Upload some file to the server and get it back.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }, {
                        id: "4",
                        name: "Check CGI",
                        description: 'Pay attention to the following:\n\n                - The server is working fine using a CGI.\n                - The CGI should be run in the correct directory for relative path file access.\n                - With the help of the students you should check that everything is working properly. You have to test the CGI with the "GET" and "POST" methods.\n                - You need to test with files containing errors to see if the error handling works properly. You can use a script containing an infinite loop or an error; you are free to do whatever tests you want within the limits of acceptability that remain at your discretion. The group being evaluated should help you with this.\n                \n                The server should never crash and an error should be visible in case of a problem.',
                        type: "boolean",
                        value: 0,
                        points: 20
                    }, {
                        id: "5",
                        name: "Port issues",
                        description: "- In the configuration file setup multiple ports and use different websites. Use the browser to ensure that the configuration works as expected and shows the right website.\n                - In the configuration, try to setup the same port multiple times. It should not work.\n                - Launch multiple servers at the same time with different configurations but with common ports. Does it work? If it does, ask why the server should work if one of the configurations isn't functional. Keep going.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "6",
                        name: "Siege & stress test",
                        description: "- Use Siege to run some stress tests.\n                - Availability should be above 99.5% for a simple GET on an empty page with a siege -b on that page.\n                - Verify there is no memory leak (Monitor the process memory usage. It should not go up indefinitely).\n                - Check if there is no hanging connection.\n                - You should be able to use siege indefinitely without having to restart the server (take a look at siege -b).\n                - When conducting load tests using the siege command be carefull it depend of your OS), it is crucial to limit the number of connections per second by specifying options such as -c (number of clients), -d (maximum wait time before a client reconnects), and -r (number of attempts). The choice of these parameters is at the discretion of the evaluator, however, it is imperative to reach an agreement with the person being evaluated to ensure a fair and transparent assessment of the web server's performance.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                },
                bonus: {
                    title: "Bonus",
                    description: "Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.",
                    criteria: [{
                        id: "7",
                        name: "Cookies and session",
                        description: "There is a working session and cookies system on the webserver.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }, {
                        id: "8",
                        name: "CGI",
                        description: "There is more than one CGI system.",
                        type: "boolean",
                        value: 0,
                        points: 12.5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }, {
            project_id: 1337,
            id: "29",
            name: "ft_transcendence",
            description: "This project is centered around the design, development, and organization of a full-stack web application.",
            difficulty: "advanced",
            estimatedHours: 245,
            baseXP: 24360,
            teamSize: {
                min: 3,
                max: 5
            },
            oldSubject: "https://codeberg.org/adrien-lsh/42-ft_transcendence/media/branch/main/subject.pdf",
            subjectUrl: "https://cdn.intra.42.fr/pdf/pdf/150347/en.subject.pdf",
            status: "not_started",
            tags: ["Specs", "Rigor", "Web", "Group & interpersonal"],
            correctionSheet: {
                introduction: "Please comply with the following rules:\n    \n    - Remain polite, courteous, respectful and constructive throughout the\n    evaluation process. The well-being of the community depends on it.\n    \n    - Identify with the student or group whose work is evaluated the possible\n    dysfunctions in their project. Take the time to discuss and debate the\n    problems that may have been identified.\n    \n    - You must consider that there might be some differences in how your peers\n    might have understood the project's instructions and the scope of its\n    functionalities. Always keep an open mind and grade them as honestly as\n    possible. The pedagogy is useful only and only if the peer-evaluation is\n    done seriously.",
                guidelines: ["Only grade the work that was turned in the Git repository of the evaluated student or group.", "Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.", "Check carefully that no malicious aliases was used to fool you and make you evaluate something that is not the content of the official repository.", "To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).", "If you have not completed the assignment you are going to evaluate, you have to read the entire subject prior to starting the evaluation process.", "Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in case of cheating. However, except for cheating, student are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.", "Remember that for the duration of the defence, no segfault, no other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explicit the reasons with the evaluated student and make sure both of you are okay with this.", "You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution. You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag."],
                attachments: [{
                    name: "subject.pdf",
                    url: "https://cdn.intra.42.fr/pdf/pdf/145012/en.subject.pdf"
                }],
                general: {
                    title: "General instructions",
                    criteria: [{
                        id: "1",
                        name: "Preliminary tests",
                        description: '- Any credentials, API keys, environment variables must be set inside a .env file during the evaluation. In case any credentials, API keys are available in the git repository and outside of the .env file created during the evaluation, the evaluation stop and the mark is 0.\n                - Ensure the docker compose file is at the root of the repository.\n                - Run the "docker-compose up --build" command.\n                - Since the rating of this project is more flexible, do not stop the evaluation process unless you encounter a 500 error, a crash, or anything that actually doesn\'t work within the project scope.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "2",
                        name: "Basic checks",
                        description: '- The website is available.\n                - The user can subscribe on the website.\n                - Registered users can log in.\n                - The website is a Single Page Application. The user can use the "Back" and "Forward" buttons of the web browser.\n                - You can browse the website using the latest version of Chrome.',
                        type: "boolean",
                        value: 0,
                        points: 5
                    }]
                },
                otherSections: [{
                    title: "The website",
                    criteria: [{
                        id: "3",
                        name: "Security concerns",
                        description: "- Ensure that the website is secured.\n                  - Be carefull about TLS. If there is a backend or any other features, it must be available.\n                  - Check if there is a database the passwords must be hashed.\n                  - Check the server for server-side validation/sanitization on forms and any user input.\n                  - If there is any error, the evaluation ends now.",
                        type: "boolean",
                        value: 0,
                        points: 20
                    }]
                }, {
                    title: "The game",
                    criteria: [{
                        id: "4",
                        name: "Local game",
                        description: "- You should be able to use this game locally on the same computer using the keyboard.\n                  - Each player should be able to utilize a section of the keyboard.\n                  - You must also be able to initiate a tournament, and the tournament should offer a matchmaking system to connect local players.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "5",
                        name: "Gameplay",
                        description: "The game itself must be playable and respect the original Pong game.\n                  The controls must be intuitive or correctly explained (with some rules or\n                  manual). When a game is over, either a kind of end-game screen is\n                  displayed or the game page just exits.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "6",
                        name: "Lags & disconnects",
                        description: "Unexpected disconnections and lags have to be handled. The game and the\n                  website must not crash when a user is experiencing lags or is disconnected.\n                  Handling such issues in an efficient way is appreciated but not mandatory:\n                  \n                  - Pause the game for a defined duration.\n                  - Disconnected users can reconnect.\n                  - Lagging users can catch up to the match.\n                  - And so forth. Any solution is acceptable. The only requirement is: the game should not crash.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }]
                }, {
                    title: "Modules",
                    description: "For this section, it is crucial to thoroughly read the PDF document detailing the requirements for each module, and provide clear and precise explanations for each choice made. In case of any doubt, do not hesitate to stop.",
                    criteria: [{
                        id: "7",
                        name: "Major module 01",
                        description: "You must now verify the chosen module(s) with each group participant.\n                  You must comprehensively understand everything that will be explained,\n                  with the subject PDF as your reference. The obligations for each module\n                  are clearly stated in the subject's PDF.\n                  \n                  Do not hesitate to ask any questions and request a demonstration of the\n                  proper functioning of these module(s).\n                  \n                  As a reminder, one major module is equivalent to 2 minor modules, as specified\n                  in the subject.\n                  \n                  A module is considered valid under the following criteria:\n                  \n                  - There are no issues with the proper functioning of the presented module(s).\n                  - We understand how it works and why it was chosen.\n                  - No errors are visible\n                  - A comprehensive explanation allows for a detailed understanding of these module(s).\n                  \n                  We would like to remind you that this is an important project, and that it is essential\n                  to carry out this evaluation properly.",
                        type: "boolean",
                        value: 0,
                        points: 10
                    }, {
                        id: "8",
                        name: "Module 02",
                        description: "You must now verify the chosen module(s) with each group participant.\n                  You must comprehensively understand everything that will be explained,\n                  with the subject PDF as your reference. The obligations for each module\n                  are clearly stated in the subject's PDF.\n                  \n                  Do not hesitate to ask any questions and request a demonstration of the\n                  proper functioning of these module(s).\n                  \n                  As a reminder, one major module is equivalent to 2 minor modules, as specified\n                  in the subject.\n                  \n                  A module is considered valid under the following criteria:\n                  \n                  - There are no issues with the proper functioning of the presented module(s).\n                  - We understand how it works and why it was chosen.\n                  - No errors are visible\n                  - A comprehensive explanation allows for a detailed understanding of these module(s).\n                  \n                  We would like to remind you that this is an important project, and that it is essential\n                  to carry out this evaluation properly.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "9",
                        name: "Module 03",
                        description: "You must now verify the chosen module(s) with each group participant.\n                  You must comprehensively understand everything that will be explained,\n                  with the subject PDF as your reference. The obligations for each module\n                  are clearly stated in the subject's PDF.\n                  \n                  Do not hesitate to ask any questions and request a demonstration of the\n                  proper functioning of these module(s).\n                  \n                  As a reminder, one major module is equivalent to 2 minor modules, as specified\n                  in the subject.\n                  \n                  A module is considered valid under the following criteria:\n                  \n                  - There are no issues with the proper functioning of the presented module(s).\n                  - We understand how it works and why it was chosen.\n                  - No errors are visible\n                  - A comprehensive explanation allows for a detailed understanding of these module(s).\n                  \n                  We would like to remind you that this is an important project, and that it is essential\n                  to carry out this evaluation properly.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "10",
                        name: "Module 04",
                        description: "You must now verify the chosen module(s) with each group participant.\n                  You must comprehensively understand everything that will be explained,\n                  with the subject PDF as your reference. The obligations for each module\n                  are clearly stated in the subject's PDF.\n                  \n                  Do not hesitate to ask any questions and request a demonstration of the\n                  proper functioning of these module(s).\n                  \n                  As a reminder, one major module is equivalent to 2 minor modules, as specified\n                  in the subject.\n                  \n                  A module is considered valid under the following criteria:\n                  \n                  - There are no issues with the proper functioning of the presented module(s).\n                  - We understand how it works and why it was chosen.\n                  - No errors are visible\n                  - A comprehensive explanation allows for a detailed understanding of these module(s).\n                  \n                  We would like to remind you that this is an important project, and that it is essential\n                  to carry out this evaluation properly.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "11",
                        name: "Module 05",
                        description: "You must now verify the chosen module(s) with each group participant.\n                  You must comprehensively understand everything that will be explained,\n                  with the subject PDF as your reference. The obligations for each module\n                  are clearly stated in the subject's PDF.\n                  \n                  Do not hesitate to ask any questions and request a demonstration of the\n                  proper functioning of these module(s).\n                  \n                  As a reminder, one major module is equivalent to 2 minor modules, as specified\n                  in the subject.\n                  \n                  A module is considered valid under the following criteria:\n                  \n                  - There are no issues with the proper functioning of the presented module(s).\n                  - We understand how it works and why it was chosen.\n                  - No errors are visible\n                  - A comprehensive explanation allows for a detailed understanding of these module(s).\n                  \n                  We would like to remind you that this is an important project, and that it is essential\n                  to carry out this evaluation properly.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "12",
                        name: "Module 06",
                        description: "You must now verify the chosen module(s) with each group participant.\n                  You must comprehensively understand everything that will be explained,\n                  with the subject PDF as your reference. The obligations for each module\n                  are clearly stated in the subject's PDF.\n                  \n                  Do not hesitate to ask any questions and request a demonstration of the\n                  proper functioning of these module(s).\n                  \n                  As a reminder, one major module is equivalent to 2 minor modules, as specified\n                  in the subject.\n                  \n                  A module is considered valid under the following criteria:\n                  \n                  - There are no issues with the proper functioning of the presented module(s).\n                  - We understand how it works and why it was chosen.\n                  - No errors are visible\n                  - A comprehensive explanation allows for a detailed understanding of these module(s).\n                  \n                  We would like to remind you that this is an important project, and that it is essential\n                  to carry out this evaluation properly.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }, {
                        id: "13",
                        name: "Module 07",
                        description: "You must now verify the chosen module(s) with each group participant.\n                  You must comprehensively understand everything that will be explained,\n                  with the subject PDF as your reference. The obligations for each module\n                  are clearly stated in the subject's PDF.\n                  \n                  Do not hesitate to ask any questions and request a demonstration of the\n                  proper functioning of these module(s).\n                  \n                  As a reminder, one major module is equivalent to 2 minor modules, as specified\n                  in the subject.\n                  \n                  A module is considered valid under the following criteria:\n                  \n                  - There are no issues with the proper functioning of the presented module(s).\n                  - We understand how it works and why it was chosen.\n                  - No errors are visible\n                  - A comprehensive explanation allows for a detailed understanding of these module(s).\n                  \n                  We would like to remind you that this is an important project, and that it is essential\n                  to carry out this evaluation properly.",
                        type: "boolean",
                        value: 0,
                        points: 5
                    }]
                }],
                bonus: {
                    title: "Bonus",
                    description: "Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.",
                    criteria: [{
                        id: "14",
                        name: "Extra Module",
                        description: "You must now verify the extra chosen module(s) with each group participant.\n                You must comprehensively understand everything that will be explained,\n                with the subject PDF as your reference. The obligations for each module\n                are clearly stated in the subject's PDF.\n                \n                Do not hesitate to ask any questions and request a demonstration of the\n                proper functioning of these module(s).\n                \n                As a reminder, one major module is equivalent to 2 points. One minor module is\n                equivalent to 1 point.\n                \n                A module is considered valid under the following criteria:\n                \n                - There are no issues with the proper functioning of the presented module(s).\n                - We understand how it works and why it was chosen.\n                - No errors are visible\n                - A comprehensive explanation allows for a detailed understanding of these module(s).\n                \n                We would like to remind you that this is an important project, and that it is essential\n                to carry out this evaluation properly.",
                        type: "progress",
                        value: 0,
                        points: 25,
                        maxProgress: 5
                    }]
                },
                totalPoints: 125
            },
            updatedAt: new Date().toISOString()
        }]